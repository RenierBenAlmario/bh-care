@model LoginViewModel

<div class="container">
    <div class="login-form-container">
        <form asp-action="Login" asp-controller="Account" method="post" id="loginForm">
            <div class="text-center mb-4">
                <i class="fas fa-user-circle mb-3 d-block mx-auto" style="font-size: 3.5rem; color: #1E88E5;"></i>
                <h2 class="welcome-title">Welcome Back</h2>
                <p class="welcome-heading">Sign in to access your account</p>
            </div>
            
            <div asp-validation-summary="ModelOnly" class="text-danger validation-summary"></div>

            <div class="form-group">
                <label asp-for="Email" class="form-label">Email or Username <span class="required">*</span></label>
                <div class="input-group">
                    <span class="input-group-text" aria-hidden="true">
                        <i class="fas fa-user" style="font-size: 16px; margin-left: 8px;"></i>
                    </span>
                    <input asp-for="Email" class="form-control" placeholder="Enter your email or username" 
                           aria-label="Email or Username" aria-required="true" required />
                </div>
                <div class="invalid-feedback" id="emailError">Email or Username is required</div>
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Password" class="form-label">Password <span class="required">*</span></label>
                <div class="input-group">
                    <span class="input-group-text" aria-hidden="true">
                        <i class="fas fa-lock" style="font-size: 16px; margin-left: 8px;"></i>
                    </span>
                    <input asp-for="Password" class="form-control" type="password" placeholder="Enter your password" 
                           aria-label="Password" aria-required="true" required />
                    <button class="btn btn-outline-secondary toggle-password" type="button" id="togglePassword" 
                            tabindex="0" aria-label="Toggle password visibility">
                        <i class="fas fa-eye" aria-hidden="true"></i>
                    </button>
                </div>
                <div class="invalid-feedback" id="passwordError">Password is required</div>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>

            <div class="form-group">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="form-check">
                        <input asp-for="RememberMe" class="form-check-input" id="rememberMe" aria-label="Remember me" />
                        <label asp-for="RememberMe" class="form-check-label" for="rememberMe">Remember me</label>
                    </div>
                    <div>
                        <a href="/Account/ForgotPassword" class="forgot-password" aria-label="Forgot password">Forgot password?</a>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary w-100" id="loginButton" aria-label="Sign in">
                    <i class="fas fa-sign-in-alt me-2" aria-hidden="true"></i> Sign In
                </button>
            </div>
            
            <div class="divider">
                <span>OR</span>
            </div>
            
            <div class="text-center mt-4">
                <span>Don't have an account?</span>
                <a asp-area="" asp-controller="Account" asp-action="SignUp" class="register-link" aria-label="Sign up">
                    <strong>Sign up</strong>
                </a>
            </div>
            
            <div class="text-center mt-3">
                <a href="/Account/ResetPassword" class="register-link" aria-label="Reset password">
                    <small><i class="fas fa-key me-1" aria-hidden="true"></i> Reset password directly</small>
                </a>
            </div>
            
            <div class="text-center mt-3">
                <a href="#" class="learn-more-link" aria-label="Learn more">
                    <small><i class="fas fa-question-circle me-1" aria-hidden="true"></i> Learn more about our services</small>
                </a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const emailInput = document.getElementById('Email');
            const passwordInput = document.getElementById('Password');
            const loginButton = document.getElementById('loginButton');
            const loginForm = document.getElementById('loginForm');
            const togglePasswordBtn = document.getElementById('togglePassword');
            const rememberMeCheckbox = document.getElementById('rememberMe');
            
            // Add animation to login form elements with staggered timing
            const formElements = document.querySelectorAll('.form-group, .divider, .text-center, .welcome-title, .welcome-heading');
            formElements.forEach((element, index) => {
                element.style.opacity = '0';
                element.style.transform = 'translateY(10px)';
                element.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
                
                setTimeout(() => {
                    element.style.opacity = '1';
                    element.style.transform = 'translateY(0)';
                }, 100 + (index * 80));
            });
            
            // Real-time validation
            function validateEmail() {
                const emailValue = emailInput.value.trim();
                const emailError = document.getElementById('emailError');
                
                if (!emailValue) {
                    emailInput.classList.add('is-invalid');
                    emailError.style.display = 'block';
                    emailInput.setAttribute('aria-invalid', 'true');
                    return false;
                } else {
                    emailInput.classList.remove('is-invalid');
                    emailInput.classList.add('is-valid');
                    emailError.style.display = 'none';
                    emailInput.setAttribute('aria-invalid', 'false');
                    return true;
                }
            }
            
            function validatePassword() {
                const passwordValue = passwordInput.value;
                const passwordError = document.getElementById('passwordError');
                
                if (!passwordValue) {
                    passwordInput.classList.add('is-invalid');
                    passwordError.style.display = 'block';
                    passwordInput.setAttribute('aria-invalid', 'true');
                    return false;
                } else {
                    passwordInput.classList.remove('is-invalid');
                    passwordInput.classList.add('is-valid');
                    passwordError.style.display = 'none';
                    passwordInput.setAttribute('aria-invalid', 'false');
                    return true;
                }
            }
            
            // Add event listeners for real-time validation
            if (emailInput) {
                emailInput.addEventListener('blur', validateEmail);
                emailInput.addEventListener('input', function() {
                    if (emailInput.classList.contains('is-invalid')) {
                        validateEmail();
                    }
                });
            }
            
            if (passwordInput) {
                passwordInput.addEventListener('blur', validatePassword);
                passwordInput.addEventListener('input', function() {
                    if (passwordInput.classList.contains('is-invalid')) {
                        validatePassword();
                    }
                });
            }
            
            // Remember me checkbox styling and animation
            if (rememberMeCheckbox) {
                rememberMeCheckbox.addEventListener('change', function() {
                    const label = document.querySelector('label[for="rememberMe"]');
                    if (label) {
                        if (this.checked) {
                            label.style.color = '#1E88E5';
                            label.style.fontWeight = '500';
                            label.style.transition = 'all 0.3s ease';
                        } else {
                            label.style.color = '';
                            label.style.fontWeight = '';
                        }
                    }
                });
            }
            
            // Form submission with animation
            if (loginForm) {
                loginForm.addEventListener('submit', function(e) {
                    const isEmailValid = validateEmail();
                    const isPasswordValid = validatePassword();
                    
                    if (!isEmailValid || !isPasswordValid) {
                        e.preventDefault();
                        // Shake animation for invalid form
                        loginForm.classList.add('shake-animation');
                        setTimeout(() => {
                            loginForm.classList.remove('shake-animation');
                        }, 500);
                        
                        // Focus the first invalid field
                        if (!isEmailValid) {
                            emailInput.focus();
                        } else {
                            passwordInput.focus();
                        }
                        
                        // Announce validation error for screen readers
                        const errorMsg = !isEmailValid ? 'Email is required' : 'Password is required';
                        announceForScreenReader(errorMsg);
                        
                        return false;
                    }
                    
                    // Button loading state
                    loginButton.innerHTML = '<span class="spinner"></span> Signing in...';
                    loginButton.disabled = true;
                    loginButton.setAttribute('aria-busy', 'true');
                    
                    // Add pulse animation to button before submitting
                    loginButton.classList.add('pulse-animation');
                    
                    // Set a timeout to reset the button after 10 seconds if no response
                    window.loginTimeout = setTimeout(function() {
                        if (loginButton && loginButton.innerHTML.includes('Signing in')) {
                            loginButton.innerHTML = '<i class="fas fa-sign-in-alt me-2" aria-hidden="true"></i> Sign In';
                            loginButton.disabled = false;
                            loginButton.setAttribute('aria-busy', 'false');
                            
                            // Show timeout error
                            const timeoutError = document.createElement('div');
                            timeoutError.className = 'alert alert-warning mt-3';
                            timeoutError.setAttribute('role', 'alert');
                            timeoutError.innerHTML = '<strong>Warning:</strong> The server is taking too long to respond. Please try again or contact support if the issue persists.';
                            loginButton.parentElement.appendChild(timeoutError);
                            
                            // Announce timeout error for screen readers
                            announceForScreenReader('Warning: The server is taking too long to respond. Please try again.');
                        }
                    }, 10000);
                });
            }
            
            // Toggle password visibility with animation
            if (togglePasswordBtn && passwordInput) {
                togglePasswordBtn.addEventListener('click', function() {
                    const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                    passwordInput.setAttribute('type', type);
                    
                    const icon = togglePasswordBtn.querySelector('i');
                    icon.classList.toggle('fa-eye');
                    icon.classList.toggle('fa-eye-slash');
                    
                    // Toggle active class for styling
                    this.classList.toggle('active');
                    
                    // Add subtle animation
                    this.classList.add('pulse-animation');
                    setTimeout(() => {
                        this.classList.remove('pulse-animation');
                    }, 300);
                    
                    // Update aria-label for accessibility
                    const newState = type === 'password' ? 'Show' : 'Hide';
                    this.setAttribute('aria-label', `${newState} password`);
                    
                    // Announce for screen readers
                    announceForScreenReader(`Password ${type === 'password' ? 'hidden' : 'shown'}`);
                });
                
                // Accessibility: allow keyboard activation
                togglePasswordBtn.addEventListener('keydown', function(e) {
                    if (e.key === 'Enter' || e.key === ' ') {
                        e.preventDefault();
                        togglePasswordBtn.click();
                    }
                });
            }
            
            // Helper function for screen reader announcements
            function announceForScreenReader(message) {
                let ariaLive = document.getElementById('aria-live-message');
                if (!ariaLive) {
                    ariaLive = document.createElement('div');
                    ariaLive.id = 'aria-live-message';
                    ariaLive.className = 'sr-only';
                    ariaLive.setAttribute('aria-live', 'assertive');
                    ariaLive.setAttribute('aria-atomic', 'true');
                    document.body.appendChild(ariaLive);
                }
                ariaLive.textContent = message;
            }
        });
    </script>
} 