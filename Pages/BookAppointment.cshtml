@page
@model Barangay.Pages.BookAppointmentModel
@{
    ViewData["Title"] = "Book an Appointment";
    ViewData["ShowDashboardNav"] = true;
    Layout = "_UserLayout";
}

@if (!ModelState.IsValid)
{
    <div class="alert alert-danger">
        <ul>
            @foreach (var error in ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
    </div>
}

@if (!string.IsNullOrEmpty(Model.StatusMessage))
{
    <div class="alert alert-success">
        @Model.StatusMessage
    </div>
}

<div class="container mt-5 pt-3">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <a href="/User/UserDashboard" class="btn btn-outline-primary">
            <i class="fa-solid fa-arrow-left me-2"></i>Back to Dashboard
        </a>
        <h1 class="fw-bold mb-0">Book an Appointment</h1>
        <div style="width: 135px;"></div>
    </div>

    <!-- Removed queue/tip alert for cleaner UI -->

    <form method="post" id="appointmentForm" asp-antiforgery="true" enctype="multipart/form-data">
        <div id="step1" class="booking-step">
            <div class="row">
                <div class="col-md-8">
                    <div class="card shadow-sm mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Patient Information</h5>
                        </div>
                        <div class="card-body">
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="bookingForOther" name="bookingForOther">
                                <input type="hidden" id="bookingForOtherHidden" name="bookingForOtherHidden" value="false">
                                <label class="form-check-label" for="bookingForOther">
                                    Booking for someone else?
                                </label>
                            </div>
                            
                            <div class="row mb-3">
                                <div class="col-md-4">
                                    <label for="fullName" class="form-label">Full Name</label>
                                    <input type="text" class="form-control" id="fullName" name="fullName" required>
                                </div>
                                <div class="col-md-2">
                                    <label for="age" class="form-label">Age</label>
                                    <input type="text" class="form-control" id="age" name="age" required inputmode="numeric" pattern="^[0-9]{1,3}$" minlength="1" maxlength="3" aria-describedby="ageHelp">
                                    <div id="ageHelp" class="form-text">Enter a whole number between 0 and 120</div>
                                </div>
                                <div class="col-md-3">
                                    <label for="birthday" class="form-label">Birthday</label>
                                    <input type="date" class="form-control" id="birthday" name="birthday">
                                </div>
                                <div class="col-md-3">
                                    <label for="phoneNumber" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" placeholder="09123456789" pattern="^09[0-9]{9}$" minlength="11" maxlength="11" inputmode="numeric" required>
                                    <div class="form-text">Enter 11-digit mobile number starting with 09</div>
                                </div>
                            </div>
                            
                            <div class="mb-3" id="relationshipField" style="display: none;">
                                <label for="relationship" class="form-label">Relationship to Patient</label>
                                <select class="form-select" id="relationship" name="relationship">
                                    <option value="">Select relationship</option>
                                    <option value="parent">Parent</option>
                                    <option value="spouse">Spouse</option>
                                    <option value="child">Child</option>
                                    <option value="sibling">Sibling</option>
                                    <option value="guardian">Guardian</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="card shadow-sm mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Appointment Details</h5>
                        </div>
                        <div class="card-body">
                            <!-- Doctor selection is now handled automatically. 
                                 A hidden input will pass the ID of the first available doctor. -->
                            <input type="hidden" id="DoctorId" name="DoctorId" value="@((!string.IsNullOrEmpty(Model.DefaultDoctorId)) ? Model.DefaultDoctorId : (Model.Doctors != null && Model.Doctors.Any() ? Model.Doctors.First().UserId : string.Empty))" />

                            <!-- Replace the date input field with a more robust implementation -->
                            <div class="mb-3">
                                <label for="appointmentDate" class="form-label">Date</label>
                                <input type="date" class="form-control" id="appointmentDate" name="appointmentDate" required min="@DateTime.Now.ToString("yyyy-MM-dd")">
                                <input type="hidden" name="BookingModel.AppointmentDate" id="hiddenAppointmentDate">
                                <div id="dateValidationMessage" class="invalid-feedback"></div>
                            </div>
                            
                            <!-- Update the consultation type dropdown to trigger time slot updates -->
                            <div class="mb-3">
                                <label for="consultationType" class="form-label">Consultation Type</label>
                                <select class="form-select" id="consultationType" name="consultationType" required>
                                    <option value="" selected disabled>Select consultation type</option>
                                    <option value="general consult">General Consult (8AM-11AM, 1PM-4PM, Mon-Fri)</option>
                                    <option value="dental">Dental (8AM-11AM, Mon/Wed/Fri)</option>
                                    <option value="immunization">Immunization (8AM-12PM, Wed)</option>
                                    <option value="prenatal & family planning">Prenatal & Family Planning (8AM-11AM, 1PM-4PM, Mon/Wed/Fri)</option>
                                    <option value="dots consult">DOTS Consult (1PM-4PM, Mon-Fri)</option>
                                </select>
                                <input type="hidden" name="BookingModel.ConsultationType" id="hiddenConsultationType">
                            </div>
                            
                            <!-- Update the time slot selection to use a standard select element instead of dropdown -->
                            <div class="mb-3">
                                <label for="timeSlot" class="form-label">Appointment Time</label>
                                <select class="form-select" id="timeSlot" name="timeSlot" required>
                                    <option value="" selected disabled>Select date and consultation type first</option>
                                </select>
                                <input type="hidden" name="BookingModel.TimeSlot" id="hiddenTimeSlot">
                                <!-- Display selected time prominently -->
                                <div id="selectedTimeDisplay" class="alert alert-info mt-2" style="display: none;">
                                    <strong>Selected Time:</strong> <span id="selectedTimeText"></span>
                                </div>
                                <div id="timeSlotMessage" class="form-text text-muted">Available time slots will appear after selecting date and consultation type.</div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="reasonForVisit" class="form-label">Reason for Visit</label>
                                <textarea class="form-control" id="reasonForVisit" name="reasonForVisit" rows="4" required maxlength="400" aria-describedby="reasonHelp"></textarea>
                                <div id="reasonHelp" class="form-text">Please be specific and respectful. Max 400 characters.</div>
                            </div>
                            
                            <button type="button" id="toStep2Button" class="btn btn-primary" onclick="console.log('[BookAppointment] Next button clicked')">Next</button>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card shadow-sm mb-4">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Booking Instructions</h5>
                        </div>
                        <div class="card-body">
                            <ol class="ps-3">
                                <li>Select your preferred date</li>
                                <li>Choose your consultation type</li>
                                <li>Select available time slot</li>
                                <li>Fill in your details</li>
                                <li>Complete health assessment (if applicable)</li>
                                <li>Submit your booking</li>
                            </ol>
                            
                            <div class="mt-4">
                                <h6>Consultation Types & Schedule:</h6>
                                <ul class="list-group">
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        General Consult
                                        <span class="badge bg-primary rounded-pill">8AM-11AM, 1PM-4PM (Mon-Fri)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Dental
                                        <span class="badge bg-primary rounded-pill">8AM-11AM (Mon/Wed/Fri)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Immunization
                                        <span class="badge bg-primary rounded-pill">8AM-12PM (Wed)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        Prenatal & Family Planning
                                        <span class="badge bg-primary rounded-pill">8AM-11AM, 1PM-4PM (Mon/Wed/Fri)</span>
                                    </li>
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        DOTS Consult
                                        <span class="badge bg-primary rounded-pill">1PM-4PM (Mon-Fri)</span>
                                    </li>
                                </ul>
                            </div>
                            
                            <div class="alert alert-info mt-3">
                                <i class="fa-solid fa-circle-info me-2"></i>
                                <strong>Note:</strong> Please arrive 15 minutes before your appointment time.
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize the form state based on user details
            const userDetails = @Html.Raw(Json.Serialize(Model.UserDetails));
            
            if (userDetails) {
                $('#fullName').val(userDetails.fullName);
                $('#age').val(userDetails.age);
                // Calculate birthday from age
                calculateBirthdayFromAge(userDetails.age);
            }

            // Handle 'Booking for someone else' checkbox
            $('#bookingForOther').change(function() {
                const isChecked = $(this).is(':checked');
                $('#bookingForOtherHidden').val(isChecked ? 'true' : 'false');
                
                if (isChecked) {
                    // Clear fields for new patient details
                    $('#fullName').val('').prop('readonly', false);
                    $('#age').val('').prop('readonly', false);
                    $('#birthday').val('').removeData('manually-entered'); // Clear birthday and reset manual entry flag
                    $('#relationshipField').show();
                } else {
                    // Restore original user details
                    if (userDetails) {
                        $('#fullName').val(userDetails.fullName);
                        $('#age').val(userDetails.age);
                        $('#birthday').removeData('manually-entered'); // Reset manual entry flag
                        calculateBirthdayFromAge(userDetails.age);
                    }
                    $('#relationshipField').hide();
                }
            });

            // Enforce digits-only for age and 0-120 range; auto-calc birthday when sensible
            $('#age').on('input', function() {
                // Strip non-digits and limit to 3 chars
                let v = $(this).val().replace(/[^0-9]/g, '').slice(0, 3);
                $(this).val(v);
                const age = parseInt(v, 10);
                const birthdayField = $('#birthday');
                
                // Only auto-calculate if birthday field is empty or user hasn't manually entered one
                if (!isNaN(age) && age >= 0 && age <= 120) {
                    if (!birthdayField.val()) {
                        calculateBirthdayFromAge(age);
                    }
                } else {
                    // Only clear birthday if it was auto-calculated
                    if (!birthdayField.data('manually-entered')) {
                        birthdayField.val('');
                    }
                }
            });

            // Enforce digits-only and format for phone number; ensure starts with 09 and 11 digits
            $('#phoneNumber').on('input', function(){
                let v = $(this).val().replace(/[^0-9]/g, '');
                if (v.length > 0 && !v.startsWith('09')) {
                    v = '09' + v.replace(/^0+/, '').replace(/^9?/, '');
                }
                $(this).val(v.slice(0, 11));
            });

            // Handle birthday input changes to calculate age
            $('#birthday').on('change', function() {
                const birthday = new Date($(this).val());
                if (!isNaN(birthday.getTime())) {
                    // Mark as manually entered
                    $(this).data('manually-entered', true);
                    
                    // Calculate age from birthday
                    const today = new Date();
                    let age = today.getFullYear() - birthday.getFullYear();
                    const monthDiff = today.getMonth() - birthday.getMonth();
                    
                    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthday.getDate())) {
                        age--;
                    }
                    
                    if (age >= 0 && age <= 120) {
                        $('#age').val(age);
                    }
                }
            });

            // Date validation - TEMPORARILY DISABLED FOR TESTING
            $('#appointmentDate').on('change', function() {
                const selectedDate = new Date($(this).val());
                const day = selectedDate.getDay(); // 0=Sun, 1=Mon, ..., 6=Sat
                const validationMessage = $('#dateValidationMessage');
                
                // TEMPORARILY COMMENTED OUT FOR TESTING
                // if (day === 0 || day === 6) { // Sunday or Saturday
                //     validationMessage.text('Appointments are not available on weekends. Please select a weekday.');
                //     $(this).addClass('is-invalid');
                // } else {
                //     validationMessage.text('');
                //     $(this).removeClass('is-invalid');
                // }
                
                // Always clear validation for testing
                validationMessage.text('');
                $(this).removeClass('is-invalid');
            });
            
            // Function to update available time slots based on date and consultation type
            function updateTimeSlots() {
                const selectedDate = $('#appointmentDate').val();
                const consultationType = $('#consultationType').val();
                const doctorId = $('#DoctorId').val();
                const timeSlotSelect = $('#timeSlot');
                const previouslySelectedTime = $('#selectedTimeText').text();
                
                console.log('[BookAppointment] updateTimeSlots called with:', {
                    selectedDate: selectedDate,
                    consultationType: consultationType,
                    doctorId: doctorId
                });
                
                if (!selectedDate || !consultationType || !doctorId) {
                    console.log('[BookAppointment] Missing required fields:', {
                        selectedDate: selectedDate,
                        consultationType: consultationType,
                        doctorId: doctorId
                    });
                    timeSlotSelect.html('<option value="" selected disabled>Select date and consultation type first</option>');
                    $('#timeSlotMessage').removeClass('text-danger').addClass('text-muted')
                        .text('Please select date and consultation type to see available time slots');
                    $('#selectedTimeDisplay').hide();
                    return;
                }
                
                console.log(`[BookAppointment] Fetching time slots for doctor ${doctorId}, date ${selectedDate}, type: ${consultationType}`);
                
                // Show loading state
                timeSlotSelect.html('<option>Loading...</option>');
                
                // Fetch available time slots via AJAX
                $.ajax({
                    url: `?handler=BookedTimeSlots&date=${selectedDate}&consultationType=${consultationType}&doctorId=${doctorId}`,
                    type: 'GET',
                    success: function(data) {
                        timeSlotSelect.empty();
                        if (data.availableSlots && data.availableSlots.length > 0) {
                            $.each(data.availableSlots, function(index, slot) {
                                timeSlotSelect.append($('<option>', {
                                    value: slot,
                                    text: slot
                                }));
                            });
                            timeSlotSelect.prop('disabled', false);
                            $('#timeSlotMessage').removeClass('text-danger').addClass('text-muted')
                                .text('Please select a time slot');
                            
                            // If there was a previously selected time and it's still available, restore it
                            if (previouslySelectedTime && data.availableSlots.includes(previouslySelectedTime)) {
                                timeSlotSelect.val(previouslySelectedTime);
                                $('#selectedTimeText').text(previouslySelectedTime);
                                $('#selectedTimeDisplay').show();
                            }
                        } else {
                            timeSlotSelect.append('<option value="">No available time slots</option>');
                            let debugMsg = data.debug || "No time slots available for this date and consultation type";
                            $('#timeSlotMessage').removeClass('text-muted').addClass('text-danger')
                                .html('<strong>No time slots available.</strong> ' + debugMsg);
                            console.log('Debug info:', data.debug);
                            // Hide selected time display if no slots available
                            $('#selectedTimeDisplay').hide();
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('[BookAppointment] AJAX Error:', {
                            status: status,
                            error: error,
                            responseText: xhr.responseText
                        });
                        timeSlotSelect.html('<option value="">Error loading time slots</option>');
                        $('#timeSlotMessage').removeClass('text-muted').addClass('text-danger')
                            .html('<strong>Error loading time slots.</strong> Please try again or contact support if the problem persists.');
                        $('#selectedTimeDisplay').hide();
                    }
                });
            }
            
            // Format time to 12-hour format with AM/PM
            function formatTime(hour, minute) {
                const period = hour >= 12 ? 'PM' : 'AM';
                const hour12 = hour % 12 || 12;
                return `${hour12}:${minute.toString().padStart(2, '0')} ${period}`;
            }
            
            // Helper function to get display name for consultation type
            function getConsultationTypeDisplay(consultationType) {
                switch(consultationType) {
                    case 'general consult':
                        return 'General Consult';
                    case 'dental':
                        return 'Dental';
                    case 'immunization':
                        return 'Immunization';
                    case 'prenatal & family planning':
                        return 'Prenatal & Family Planning';
                    case 'dots consult':
                        return 'DOTS Consult';
                    default:
                        return consultationType;
                }
            }
            
            // Event listener for date input changes
            $('#appointmentDate').on('change', function() {
                const selectedDate = $(this).val();
                console.log('[BookAppointment] Date changed to:', selectedDate);
                updateTimeSlots();
            });
            
            // Event listener for consultation type changes
            $('#consultationType').on('change', function() {
                const selectedType = $(this).val();
                console.log('[BookAppointment] Consultation type changed to:', selectedType);
                updateTimeSlots();
            });
            
            // Initialize time slots if date and consultation type are already selected
            $(document).ready(function() {
                console.log('[BookAppointment] Document ready - checking for pre-filled values');
                
                // Always try to get doctor ID first, regardless of what's in the hidden field
                console.log('[BookAppointment] Attempting to get doctor ID from server');
                $.ajax({
                    url: '?handler=GetDefaultDoctor',
                    type: 'GET',
                    success: function(data) {
                        console.log('[BookAppointment] GetDefaultDoctor response:', data);
                        if (data && data.doctorId && data.doctorId !== '') {
                            $('#DoctorId').val(data.doctorId);
                            console.log('[BookAppointment] Set DoctorId to:', data.doctorId);
                            
                            // Now check if we can load time slots
                            const selectedDate = $('#appointmentDate').val();
                            const consultationType = $('#consultationType').val();
                            
                            console.log('[BookAppointment] Checking conditions:', {
                                selectedDate: selectedDate,
                                consultationType: consultationType,
                                doctorId: data.doctorId
                            });
                            
                            if (selectedDate && consultationType) {
                                console.log('[BookAppointment] All conditions met, loading time slots');
                                updateTimeSlots();
                            } else {
                                console.log('[BookAppointment] Missing date or consultation type, time slots will load when both are selected');
                            }
                        } else {
                            console.error('[BookAppointment] No doctor ID available from server:', data);
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('[BookAppointment] Failed to get doctor ID from server:', error);
                    }
                });
            });
            
            // Event listener for time slot selection
            $('#timeSlot').on('change', function() {
                const selectedTime = $(this).val();
                if (selectedTime && selectedTime !== '') {
                    $('#selectedTimeText').text(selectedTime);
                    $('#selectedTimeDisplay').show();
                } else {
                    $('#selectedTimeDisplay').hide();
                }
            });
            
            // Restore form data from session storage if available
            function restoreFormData() {
                try {
                    const savedData = sessionStorage.getItem('appointmentFormData');
                    if (savedData) {
                        const formData = JSON.parse(savedData);
                        
                        // Restore form fields
                        if (formData.appointmentDate) {
                            $('#appointmentDate').val(formData.appointmentDate);
                        }
                        if (formData.consultationType) {
                            $('#consultationType').val(formData.consultationType);
                        }
                        if (formData.timeSlot) {
                            // Set the time slot and show the selected time display
                            $('#timeSlot').val(formData.timeSlot);
                            $('#selectedTimeText').text(formData.timeSlot);
                            $('#selectedTimeDisplay').show();
                        }
                        if (formData.reasonForVisit) {
                            $('#reasonForVisit').val(formData.reasonForVisit);
                        }
                        
                        console.log('[BookAppointment] Form data restored from session storage');
                    }
                } catch (error) {
                    console.error('[BookAppointment] Error restoring form data:', error);
                }
            }
            
            // Restore form data on page load
            restoreFormData();
            
            // Handle Next button click
            $('#toStep2Button').on('click', function() {
                console.log('[BookAppointment] Next button clicked');
                
                // Synchronize form values with model properties
                $('#hiddenAppointmentDate').val($('#appointmentDate').val());
                $('#hiddenTimeSlot').val($('#timeSlot').val());
                $('#hiddenConsultationType').val($('#consultationType').val());
                
                // Ensure checkbox state is properly set before getting form data
                const isBookingForOther = $('#bookingForOther').is(':checked');
                $('#bookingForOtherHidden').val(isBookingForOther ? 'true' : 'false');
                
                // Get form data
                const formData = {
                    fullName: $('#fullName').val(),
                    age: $('#age').val(),
                    birthday: $('#birthday').val(),
                    phoneNumber: $('#phoneNumber').val(),
                    appointmentDate: $('#appointmentDate').val(),
                    consultationType: $('#consultationType').val(),
                    timeSlot: $('#timeSlot').val(),
                    reasonForVisit: $('#reasonForVisit').val(),
                    bookingForOther: isBookingForOther ? 'true' : 'false',
                    bookingForOtherHidden: $('#bookingForOtherHidden').val(),
                    relationship: $('#relationship').val()
                };
                
                console.log('[BookAppointment] Form data:', formData);
                console.log('[BookAppointment] Booking for other:', $('#bookingForOther').is(':checked'));
                console.log('[BookAppointment] Checkbox value:', $('#bookingForOther').val());
                console.log('[BookAppointment] Checkbox prop checked:', $('#bookingForOther').prop('checked'));
                console.log('[BookAppointment] Full name value:', $('#fullName').val());
                console.log('[BookAppointment] Age value:', $('#age').val());
                console.log('[BookAppointment] Birthday value:', $('#birthday').val());
                
                // Validate required fields
                let isValid = true;
                const requiredFields = $('#step1').find('[required]');
                
                console.log('[BookAppointment] Validating required fields...');
                requiredFields.each(function() {
                    if (!$(this).val()) {
                        $(this).addClass('is-invalid');
                        isValid = false;
                        console.warn('[BookAppointment] Invalid field:', $(this).attr('name'));
                    } else {
                        $(this).removeClass('is-invalid');
                        console.log('[BookAppointment] Valid field:', $(this).attr('name'), '=', $(this).val());
                    }
                });
                
                // Validate age strictly 0-120
                const ageStr = $('#age').val();
                const ageNum = parseInt(ageStr, 10);
                if (isNaN(ageNum) || ageNum < 0 || ageNum > 120) {
                    $('#age').addClass('is-invalid');
                    isValid = false;
                    console.warn('[BookAppointment] Invalid field: age out of range');
                } else {
                    $('#age').removeClass('is-invalid');
                }

                // Additional validation for relationship field when booking for someone else
                if ($('#bookingForOther').is(':checked') && !$('#relationship').val()) {
                    $('#relationship').addClass('is-invalid');
                    isValid = false;
                    console.warn('[BookAppointment] Invalid field: relationship');
                }
                
                // Additional validation for patient details when booking for someone else
                if ($('#bookingForOther').is(':checked')) {
                    if (!$('#fullName').val() || $('#fullName').val().trim() === '') {
                        $('#fullName').addClass('is-invalid');
                        isValid = false;
                        console.warn('[BookAppointment] Invalid field: fullName when booking for other');
                    }
                    if (!$('#age').val() || $('#age').val().trim() === '') {
                        $('#age').addClass('is-invalid');
                        isValid = false;
                        console.warn('[BookAppointment] Invalid field: age when booking for other');
                    }
                    if (!$('#phoneNumber').val() || $('#phoneNumber').val().trim() === '') {
                        $('#phoneNumber').addClass('is-invalid');
                        isValid = false;
                        console.warn('[BookAppointment] Invalid field: phoneNumber when booking for other');
                    }
                }
                
                // Always validate phone number regardless of booking for other
                const phoneNumber = $('#phoneNumber').val();
                const phonePattern = /^09[0-9]{9}$/;
                if (!phoneNumber || phoneNumber.trim() === '' || !phonePattern.test(phoneNumber)) {
                    $('#phoneNumber').addClass('is-invalid');
                    isValid = false;
                    console.warn('[BookAppointment] Invalid field: phoneNumber - invalid format:', phoneNumber);
                } else {
                    $('#phoneNumber').removeClass('is-invalid');
                    console.log('[BookAppointment] Valid field: phoneNumber =', phoneNumber);
                }

                // Profanity filter for reason for visit (basic EN/TL list)
                const reason = $('#reasonForVisit').val() || '';
                const badWords = [
                    'fuck','shit','bitch','asshole','bastard','damn',
                    'puta','putang ina','pakyu','ulol','gago','tarantado','tangina'
                ];
                const containsBadWord = badWords.some(w => {
                    const escaped = w.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                    const pattern = new RegExp(`(^|\\b)${escaped}(\\b|$)`, 'i');
                    return pattern.test(reason);
                });
                if (containsBadWord) {
                    $('#reasonForVisit').addClass('is-invalid');
                    isValid = false;
                    alert('Please remove inappropriate language from the Reason for Visit.');
                } else {
                    $('#reasonForVisit').removeClass('is-invalid');
                }
                
                // Always validate time slot
                const timeSlot = $('#timeSlot').val();
                if (!timeSlot || timeSlot.trim() === '' || timeSlot === 'Select date and consultation type first') {
                    $('#timeSlot').addClass('is-invalid');
                    isValid = false;
                    console.warn('[BookAppointment] Invalid field: timeSlot - not selected');
                } else {
                    $('#timeSlot').removeClass('is-invalid');
                    console.log('[BookAppointment] Valid field: timeSlot =', timeSlot);
                }
                
                if (!isValid) {
                    console.error('[BookAppointment] Validation failed - cannot proceed to step 2');
                    alert('Please fill in all required fields before proceeding.');
                    return;
                }
                
                // Save form data to session storage for assessment forms to access
                try {
                    sessionStorage.setItem('appointmentFormData', JSON.stringify(formData));
                    console.log('[BookAppointment] Form data saved to session storage');
                } catch (error) {
                    console.error('[BookAppointment] Error saving form data:', error);
                }
                
                // Submit via AJAX to the new endpoint
                $.ajax({
                    url: '?handler=CreateAjax',
                    type: 'POST',
                    data: new FormData($('#appointmentForm')[0]),
                    processData: false,
                    contentType: false,
                    headers: {
                        "RequestVerificationToken": $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(response) {
                        console.log('[BookAppointment] AJAX response:', response);
                        if (response.success) {
                            const appointmentId = response.appointmentId;
                            const age = response.age;
                            console.log('[BookAppointment] Appointment created with ID:', appointmentId);
                            
                            // Show a message that the form is saved as draft
                            if (confirm('Your appointment has been saved as a draft. Would you like to complete the assessment form now? (You can also complete it later from your Appointments page)')) {
                                // Clear session storage only when user chooses to complete the form
                                sessionStorage.removeItem('appointmentFormData');
                                
                                // If user chooses to complete the form now, redirect to the appropriate assessment
                                if (age >= 20) {
                                    // Redirect to NCD Risk Assessment for users 20+
                                    window.location.href = `/User/NCDRiskAssessment?appointmentId=${appointmentId}`;
                                } else if (age >= 10 && age <= 19) {
                                    // Redirect to HEEADSSS Assessment for users 10-19
                                    window.location.href = `/User/HEEADSSSAssessment?appointmentId=${appointmentId}`;
                                } else {
                                    // For users under 10, show success message and redirect to appointments
                                    alert('Appointment details saved! No assessment form is required for patients under 10 years old.');
                                    window.location.href = '/User/Appointments';
                                }
                            } else {
                                // If user chooses to complete later, keep session storage for potential return
                                // Redirect to appointments page
                                window.location.href = '/User/Appointments';
                            }
                        } else {
                            console.error('[BookAppointment] Appointment creation failed:', response.error);
                            
                            // Handle specific error types
                            if (response.errorType === 'TimeSlotConflict') {
                                // Time slot conflict - update the UI to show this
                                $('#timeSlot').addClass('is-invalid');
                                $('#timeSlotMessage')
                                    .addClass('text-danger')
                                    .text(response.error);
                                
                                // Refresh the time slots to get the latest availability
                                updateTimeSlots();
                                
                                // Show error alert
                                alert('Time slot conflict: ' + response.error);
                            } else {
                                // General error
                                alert('Error saving appointment details: ' + (response.error || 'Unknown error'));
                            }
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('[BookAppointment] AJAX error:', error);
                        alert('Error saving appointment details. Please try again.');
                    }
                });
            });

            // Function to calculate birthday from age
            function calculateBirthdayFromAge(age) {
                if (!age || age <= 0 || age > 120) {
                    $('#birthday').val('');
                    return;
                }

                // Calculate birthday by subtracting age from current date
                const today = new Date();
                const currentYear = today.getFullYear();
                const birthYear = currentYear - age;
                
                // Create birthday date (using January 1st as default day)
                const birthday = new Date(birthYear, 0, 1);
                
                // Format as YYYY-MM-DD for date input
                const formattedDate = birthday.getFullYear() + '-' + 
                    String(birthday.getMonth() + 1).padStart(2, '0') + '-' + 
                    String(birthday.getDate()).padStart(2, '0');
                
                $('#birthday').val(formattedDate);
            }

        });
    </script>
}