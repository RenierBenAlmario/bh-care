@page
@model Barangay.Pages.Doctor.ReportsModel
@{
    ViewData["Title"] = "Monthly Sickness Tracker";
}

@if (!Model.CanAccessReports)
{
    <div class="container mt-5">
        <div class="alert alert-danger shadow-sm">
            <h4 class="alert-heading">Access Denied</h4>
            <p>You do not have permission to access the Reports feature.</p>
        </div>
    </div>
}
else
{
    <style>
        :root {
            --primary: #ff7a00; /* orange */
            --green: #2e7d32;
            --red: #c62828;
            --gray-100: #f8f9fa;
            --gray-200: #eef0f2;
            --gray-400: #cfd4da;
            --text: #2b2f33;
        }
        .report-wrapper { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .toolbar { display:flex; flex-wrap:wrap; gap:12px; align-items:center; justify-content:space-between; margin-bottom:16px; }
        .title { font-weight:700; color: var(--text); margin:0; }
        .select { min-width: 220px; padding:10px 12px; border:1px solid var(--gray-400); border-radius:8px; background:#fff; box-shadow: 0 2px 8px rgba(0,0,0,.04); }
        .btn {
            border: none; border-radius: 8px; padding: 10px 14px; cursor: pointer;
            background: var(--gray-200); color: var(--text); box-shadow: 0 2px 8px rgba(0,0,0,.06);
        }
        .btn-primary { background: var(--primary); color: #fff; }
        .btn-outline { background: #fff; border:1px solid var(--gray-400); }
        .grid { display:grid; grid-template-columns: 1fr; gap:16px; }
        @@media (min-width: 992px) { .grid { grid-template-columns: 1fr 1fr; } }
        .card { background:#fff; border:1px solid var(--gray-200); border-radius:16px; padding:16px; box-shadow: 0 6px 18px rgba(0,0,0,.06); }
        .card h5 { margin-bottom:12px; font-weight:600; color:var(--text); }
        table { width:100%; border-collapse:separate; border-spacing:0 8px; }
        thead th { font-weight:600; color:#6b7280; text-transform:uppercase; font-size:12px; letter-spacing:.04em; }
        tbody tr { background:#fff; box-shadow: 0 1px 6px rgba(0,0,0,.04); }
        tbody td { padding:12px 14px; border-top:1px solid var(--gray-200); border-bottom:1px solid var(--gray-200); }
        tbody tr td:first-child { border-left:1px solid var(--gray-200); border-radius:12px 0 0 12px; }
        tbody tr td:last-child { border-right:1px solid var(--gray-200); border-radius:0 12px 12px 0; }
        .trend-up { color: var(--green); font-weight:600; }
        .trend-down { color: var(--red); font-weight:600; }
        .muted { color:#6b7280; }
    </style>

    <div class="report-wrapper" id="report-root">
        <div class="toolbar">
            <h2 class="title">Monthly Sickness Tracker</h2>
            <div style="display:flex; gap:8px; align-items:center;">
                <form method="get" id="monthForm">
                    <select name="month" class="select" onchange="document.getElementById('monthForm').submit();">
                        @foreach (var m in Model.MonthOptions)
                        {
                            <option value="@m" selected="@(m == Model.SelectedMonthLabel ? "selected" : null)">@m</option>
                        }
                    </select>
                </form>
                <button class="btn btn-primary" id="btnExportPdf">Export PDF</button>
                <button class="btn btn-outline" id="btnExportExcel">Export Excel</button>
            </div>
        </div>

        <div class="grid">
            <div class="card">
                <h5>Top Diagnosed Conditions (@Model.SelectedMonthLabel)</h5>
                <canvas id="topConditionsChart" height="220"></canvas>
            </div>
            <div class="card">
                <h5>Sickness Trend (Past Months)</h5>
                <canvas id="trendChart" height="220"></canvas>
            </div>
        </div>

        <div class="card" style="margin-top:16px;">
            <h5>Monthly Breakdown</h5>
            <div class="table-responsive">
                <table>
                    <thead>
                        <tr>
                            <th>Condition</th>
                            <th>Cases this Month</th>
                            <th>% of Total</th>
                            <th>Last Month Cases</th>
                            <th>Trend</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.TopConditionStats.Count == 0)
                        {
                            <tr><td colspan="5" class="muted">No records for @Model.SelectedMonthLabel</td></tr>
                        }
                        else
                        {
                            foreach (var row in Model.TopConditionStats)
                            {
                                var cls = row.TrendDirection == "up" ? "trend-up" : (row.TrendDirection == "down" ? "trend-down" : "muted");
                                var icon = row.TrendDirection == "up" ? "▲" : (row.TrendDirection == "down" ? "▼" : "—");
                                <tr>
                                    <td>@row.Condition</td>
                                    <td>@row.CasesThisMonth</td>
                                    <td>@row.PercentOfTotal.ToString("0.0")%</td>
                                    <td>@row.LastMonthCases</td>
                                    <td class="@cls">@icon</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
    <script>
        const topLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopConditionStats.Select(s => s.Condition)));
        const topValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopConditionStats.Select(s => s.CasesThisMonth)));
        const trendLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TrendLabels));
        const trendValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TrendValues));

        const primary = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
        const gray200 = getComputedStyle(document.documentElement).getPropertyValue('--gray-200').trim();

        // Top conditions (pie if <=5 otherwise bar)
        const isPie = topLabels.length <= 5;
        const palette = [primary, '#ff9e42', '#ffd1a3', '#a0aec0', '#93c5fd', '#86efac'];
        const ctx1 = document.getElementById('topConditionsChart');
        new Chart(ctx1, {
            type: isPie ? 'pie' : 'bar',
            data: {
                labels: topLabels,
                datasets: [{
                    label: 'Cases',
                    data: topValues,
                    backgroundColor: isPie ? palette.slice(0, Math.max(topLabels.length,1)) : palette[0],
                    borderWidth: 0
                }]
            },
            options: {
                plugins: { legend: { display: isPie } },
                scales: isPie ? {} : { y: { beginAtZero: true, grid: { color: gray200 } }, x: { grid: { display:false } } }
            }
        });

        // Trend (line)
        const ctx2 = document.getElementById('trendChart');
        new Chart(ctx2, {
            type: 'line',
            data: { labels: trendLabels, datasets: [{ label: 'Total Cases', data: trendValues, borderColor: primary, backgroundColor: 'rgba(255,122,0,.15)', tension: .3, fill: true, pointRadius: 3 }] },
            options: { scales: { y: { beginAtZero: true, grid: { color: gray200 } }, x: { grid: { display:false } } } }
        });

        // Export Excel with enhanced formatting
        document.getElementById('btnExportExcel').addEventListener('click', () => {
            // Create a more comprehensive Excel-compatible CSV
            const reportTitle = 'Monthly Sickness Tracker - @Model.SelectedMonthLabel';
            const generatedDate = new Date().toLocaleDateString();
            
            const csvContent = [
                // Header section
                [reportTitle],
                [`Generated on: ${generatedDate}`],
                [''],
                ['TOP DIAGNOSED CONDITIONS'],
                ['Condition', 'Cases This Month', '% of Total', 'Last Month Cases', 'Trend'],
                // Data rows
                @foreach (var r in Model.TopConditionStats)
                {
                    <text>["@r.Condition", "@r.CasesThisMonth", "@r.PercentOfTotal.ToString("0.0")%", "@r.LastMonthCases", "@r.TrendDirection"],</text>
                }
                [''],
                ['SICKNESS TREND (PAST MONTHS)'],
                ['Month', 'Total Cases'],
                @for (int i = 0; i < Model.TrendLabels.Count; i++)
                {
                    <text>["@Model.TrendLabels[i]", "@Model.TrendValues[i]"],</text>
                }
                [''],
                ['SUMMARY STATISTICS'],
                ['Metric', 'Value'],
                ['Total Conditions Tracked', '@Model.TopConditionStats.Count'],
                ['Total Cases This Month', '@Model.TopConditionStats.Sum(c => c.CasesThisMonth)'],
                ['Average Cases per Condition', '@(Model.TopConditionStats.Count > 0 ? (Model.TopConditionStats.Sum(c => c.CasesThisMonth) / (double)Model.TopConditionStats.Count).ToString("0.0") : "0")'],
                [''],
                ['NOTES'],
                ['This report contains sickness tracking data for @Model.SelectedMonthLabel.'],
                ['Trend indicators: up = increasing, down = decreasing, flat = no change.'],
                ['Generated by Barangay Health Care System.']
            ];
            
            // Convert to CSV format with proper escaping
            const csv = csvContent.map(row => 
                row.map(cell => {
                    const cellStr = String(cell || '');
                    // Escape quotes and wrap in quotes if contains comma, quote, or newline
                    if (cellStr.includes('"') || cellStr.includes(',') || cellStr.includes('\n')) {
                        return '"' + cellStr.replace(/"/g, '""') + '"';
                    }
                    return cellStr;
                }).join(',')
            ).join('\n');
            
            // Create and download the file
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `SicknessReport-@Model.SelectedMonthLabel`.replace(/\s+/g,'_') + '.csv';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        // Export PDF with professional layout
        document.getElementById('btnExportPdf').addEventListener('click', async () => {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'mm', 'a4');
            
            // Set up fonts and colors
            pdf.setFont('helvetica');
            const primaryColor = [255, 122, 0]; // Orange
            const darkGray = [43, 47, 51];
            const lightGray = [107, 114, 128];
            
            // Header
            pdf.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
            pdf.rect(0, 0, 210, 25, 'F');
            
            pdf.setTextColor(255, 255, 255);
            pdf.setFontSize(18);
            pdf.setFont('helvetica', 'bold');
            pdf.text('Monthly Sickness Tracker', 15, 17);
            
            pdf.setFontSize(10);
            pdf.setFont('helvetica', 'normal');
            pdf.text('@Model.SelectedMonthLabel', 15, 22);
            
            // Reset text color
            pdf.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
            
            // Report date
            pdf.setFontSize(8);
            pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 150, 22);
            
            let yPosition = 35;
            
            // Top Diagnosed Conditions Section
            pdf.setFontSize(14);
            pdf.setFont('helvetica', 'bold');
            pdf.text('Top Diagnosed Conditions', 15, yPosition);
            
            yPosition += 10;
            
            // Create pie chart data
            const conditions = @Html.Raw(Json.Serialize(Model.TopConditionStats.Take(5).Select(c => new { 
                name = c.Condition, 
                value = c.CasesThisMonth,
                percentage = c.PercentOfTotal
            })));
            
            if (conditions.length > 0) {
                // Draw simple pie chart representation
                const centerX = 50;
                const centerY = yPosition + 20;
                const radius = 25;
                
                let currentAngle = 0;
                const colors = [
                    [255, 122, 0], [46, 125, 50], [198, 40, 40], [156, 39, 176], [33, 150, 243]
                ];
                
                conditions.forEach((condition, index) => {
                    const sliceAngle = (condition.value / conditions.reduce((sum, c) => sum + c.value, 0)) * 360;
                    
                    pdf.setFillColor(colors[index % colors.length][0], colors[index % colors.length][1], colors[index % colors.length][2]);
                    pdf.circle(centerX, centerY, radius, 'F');
                    
                    // Add legend
                    const legendY = yPosition + (index * 8);
                    pdf.setFillColor(colors[index % colors.length][0], colors[index % colors.length][1], colors[index % colors.length][2]);
                    pdf.rect(120, legendY - 2, 4, 4, 'F');
                    pdf.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
                    pdf.setFontSize(9);
                    pdf.setFont('helvetica', 'normal');
                    pdf.text(`${condition.name}: ${condition.value} cases (${condition.percentage.toFixed(1)}%)`, 128, legendY);
                    
                    currentAngle += sliceAngle;
                });
                
                yPosition += 60;
            } else {
                pdf.setFontSize(10);
                pdf.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
                pdf.text('No data available for this month', 15, yPosition + 20);
                yPosition += 40;
            }
            
            // Sickness Trend Section
            pdf.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
            pdf.setFontSize(14);
            pdf.setFont('helvetica', 'bold');
            pdf.text('Sickness Trend (Past Months)', 15, yPosition);
            
            yPosition += 10;
            
            // Draw trend chart
            const trendData = @Html.Raw(Json.Serialize(Model.TrendValues));
            const trendLabels = @Html.Raw(Json.Serialize(Model.TrendLabels));
            
            if (trendData.length > 0) {
                const chartWidth = 100;
                const chartHeight = 40;
                const chartX = 15;
                const chartY = yPosition;
                
                // Draw axes
                pdf.setDrawColor(200, 200, 200);
                pdf.line(chartX, chartY, chartX + chartWidth, chartY); // X-axis
                pdf.line(chartX, chartY, chartX, chartY - chartHeight); // Y-axis
                
                // Draw trend line
                const maxValue = Math.max(...trendData);
                const minValue = Math.min(...trendData);
                const valueRange = maxValue - minValue || 1;
                
                pdf.setDrawColor(primaryColor[0], primaryColor[1], primaryColor[2]);
                pdf.setLineWidth(2);
                
                for (let i = 0; i < trendData.length - 1; i++) {
                    const x1 = chartX + (i / (trendData.length - 1)) * chartWidth;
                    const y1 = chartY - ((trendData[i] - minValue) / valueRange) * chartHeight;
                    const x2 = chartX + ((i + 1) / (trendData.length - 1)) * chartWidth;
                    const y2 = chartY - ((trendData[i + 1] - minValue) / valueRange) * chartHeight;
                    
                    pdf.line(x1, y1, x2, y2);
                }
                
                // Add labels
                pdf.setFontSize(8);
                pdf.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
                for (let i = 0; i < trendLabels.length; i++) {
                    const x = chartX + (i / (trendLabels.length - 1)) * chartWidth;
                    pdf.text(trendLabels[i], x - 10, chartY + 8);
                }
                
                yPosition += 60;
            } else {
                pdf.setFontSize(10);
                pdf.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
                pdf.text('No trend data available', 15, yPosition + 20);
                yPosition += 40;
            }
            
            // Monthly Breakdown Table
            pdf.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
            pdf.setFontSize(14);
            pdf.setFont('helvetica', 'bold');
            pdf.text('Monthly Breakdown', 15, yPosition);
            
            yPosition += 15;
            
            // Table headers
            pdf.setFillColor(248, 249, 250);
            pdf.rect(15, yPosition - 5, 180, 8, 'F');
            
            pdf.setFontSize(9);
            pdf.setFont('helvetica', 'bold');
            pdf.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
            
            const headers = ['Condition', 'Cases This Month', '% of Total', 'Last Month Cases', 'Trend'];
            const colWidths = [60, 30, 25, 30, 20];
            let xPos = 15;
            
            headers.forEach((header, index) => {
                pdf.text(header, xPos + 2, yPosition);
                xPos += colWidths[index];
            });
            
            yPosition += 8;
            
            // Table data
            pdf.setFont('helvetica', 'normal');
            pdf.setFontSize(8);
            
            @foreach (var row in Model.TopConditionStats)
            {
                <text>
                pdf.setTextColor(darkGray[0], darkGray[1], darkGray[2]);
                pdf.text('@row.Condition', 17, yPosition);
                pdf.text('@row.CasesThisMonth', 77, yPosition);
                pdf.text('@row.PercentOfTotal.ToString("0.0")%', 107, yPosition);
                pdf.text('@row.LastMonthCases', 135, yPosition);
                
                // Trend indicator
                pdf.setFontSize(10);
                if ('@row.TrendDirection' === 'up') {
                    pdf.setTextColor(46, 125, 50);
                    pdf.text('↗', 165, yPosition);
                } else if ('@row.TrendDirection' === 'down') {
                    pdf.setTextColor(198, 40, 40);
                    pdf.text('↘', 165, yPosition);
                } else {
                    pdf.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
                    pdf.text('→', 165, yPosition);
                }
                pdf.setFontSize(8);
                
                yPosition += 6;
                </text>
            }
            
            // Footer
            pdf.setFontSize(8);
            pdf.setTextColor(lightGray[0], lightGray[1], lightGray[2]);
            pdf.text('This report was generated automatically by the Barangay Health Care System.', 15, 280);
            pdf.text('For questions or concerns, please contact the system administrator.', 15, 285);
            
            // Save the PDF
            pdf.save(`SicknessReport-@Model.SelectedMonthLabel`.replace(/\s+/g,'_') + '.pdf');
        });
    </script>
}
    