@page
@model Barangay.Pages.Doctor.ReportsModel
@{
    var isYearly = Model.ViewType == "yearly";
    ViewData["Title"] = isYearly ? "Yearly Sickness Tracker" : "Monthly Sickness Tracker";
    var periodLabel = isYearly ? Model.SelectedYearLabel : Model.SelectedMonthLabel;
}

@if (!Model.CanAccessReports)
{
    <div class="container mt-5">
        <div class="alert alert-danger shadow-sm">
            <h4 class="alert-heading">Access Denied</h4>
            <p>You do not have permission to access the Reports feature.</p>
        </div>
    </div>
}
else
{
    <style>
        :root {
            --primary: #ff7a00; /* orange */
            --green: #2e7d32;
            --red: #c62828;
            --gray-100: #f8f9fa;
            --gray-200: #eef0f2;
            --gray-400: #cfd4da;
            --text: #2b2f33;
        }
        .report-wrapper { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .toolbar { display:flex; flex-wrap:wrap; gap:12px; align-items:center; justify-content:space-between; margin-bottom:16px; }
        .title { font-weight:700; color: var(--text); margin:0; }
        .select { min-width: 220px; padding:10px 12px; border:1px solid var(--gray-400); border-radius:8px; background:#fff; box-shadow: 0 2px 8px rgba(0,0,0,.04); }
        .btn {
            border: none; border-radius: 8px; padding: 10px 14px; cursor: pointer;
            background: var(--gray-200); color: var(--text); box-shadow: 0 2px 8px rgba(0,0,0,.06);
        }
        .btn-primary { background: var(--primary); color: #fff; }
        .btn-outline { background: #fff; border:1px solid var(--gray-400); }
        .grid { display:grid; grid-template-columns: 1fr; gap:16px; }
        @@media (min-width: 992px) { .grid { grid-template-columns: 1fr 1fr; } }
        .card { background:#fff; border:1px solid var(--gray-200); border-radius:16px; padding:16px; box-shadow: 0 6px 18px rgba(0,0,0,.06); }
        .card h5 { margin-bottom:12px; font-weight:600; color:var(--text); }
        table { width:100%; border-collapse:separate; border-spacing:0 8px; }
        thead th { font-weight:600; color:#6b7280; text-transform:uppercase; font-size:12px; letter-spacing:.04em; }
        tbody tr { background:#fff; box-shadow: 0 1px 6px rgba(0,0,0,.04); }
        tbody td { padding:12px 14px; border-top:1px solid var(--gray-200); border-bottom:1px solid var(--gray-200); }
        tbody tr td:first-child { border-left:1px solid var(--gray-200); border-radius:12px 0 0 12px; }
        tbody tr td:last-child { border-right:1px solid var(--gray-200); border-radius:0 12px 12px 0; }
        .trend-up { color: var(--green); font-weight:600; }
        .trend-down { color: var(--red); font-weight:600; }
        .muted { color:#6b7280; }
    </style>

    <div class="report-wrapper" id="report-root">
        <div class="toolbar">
            <h2 class="title" id="reportTitle">@(isYearly ? "Yearly Sickness Tracker" : "Monthly Sickness Tracker")</h2>
            <div style="display:flex; gap:8px; align-items:center;">
                <div style="display:flex; gap:8px; align-items:center;">
                    <label style="font-weight:600; color:var(--text);">View:</label>
                    <select id="viewType" class="select" style="min-width:120px;" onchange="toggleViewType()">
                        <option value="monthly" selected="@(Model.ViewType == "monthly")">Monthly</option>
                        <option value="yearly" selected="@(Model.ViewType == "yearly")">Yearly</option>
                    </select>
                </div>
                <form method="get" id="monthForm" style="display:@(Model.ViewType == "monthly" ? "block" : "none");">
                    <input type="hidden" name="view" value="monthly" />
                    <select name="month" class="select" onchange="document.getElementById('monthForm').submit();">
                        @foreach (var m in Model.MonthOptions)
                        {
                            <option value="@m" selected="@(m == Model.SelectedMonthLabel ? "selected" : null)">@m</option>
                        }
                    </select>
                </form>
                <form method="get" id="yearForm" style="display:@(Model.ViewType == "yearly" ? "block" : "none");">
                    <input type="hidden" name="view" value="yearly" />
                    <select name="year" class="select" onchange="document.getElementById('yearForm').submit();">
                        @foreach (var y in Model.YearOptions)
                        {
                            <option value="@y" selected="@(y == Model.SelectedYearLabel ? "selected" : null)">@y</option>
                        }
                    </select>
                </form>
                <button class="btn btn-primary" id="btnExportPdf">Export PDF</button>
                <button class="btn btn-outline" id="btnExportExcel">Export Excel</button>
            </div>
        </div>

        <div class="grid">
            <div class="card">
                <h5 id="topConditionsTitle">Top Diagnosed Conditions (@periodLabel)</h5>
                <canvas id="topConditionsChart" height="220"></canvas>
            </div>
            <div class="card">
                <h5 id="trendTitle">@(isYearly ? "Sickness Trend (Past Years)" : "Sickness Trend (Past Months)")</h5>
                <canvas id="trendChart" height="220"></canvas>
            </div>
        </div>

        <div class="card" style="margin-top:16px;">
            <h5 id="breakdownTitle">@(isYearly ? "Yearly Breakdown" : "Monthly Breakdown")</h5>
            <div class="table-responsive">
                <table>
                    <thead>
                        <tr>
                            <th>Condition</th>
                            <th id="casesHeader">@(isYearly ? "Cases this Year" : "Cases this Month")</th>
                            <th>% of Total</th>
                            <th id="comparisonHeader">@(isYearly ? "Last Year Cases" : "Last Month Cases")</th>
                            <th>Trend</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.TopConditionStats.Count == 0)
                        {
                            <tr><td colspan="5" class="muted" id="noDataMessage">No records for @(Model.ViewType == "yearly" ? Model.SelectedYearLabel : Model.SelectedMonthLabel)</td></tr>
                        }
                        else
                        {
                            foreach (var row in Model.TopConditionStats)
                            {
                                var cls = row.TrendDirection == "up" ? "trend-up" : (row.TrendDirection == "down" ? "trend-down" : "muted");
                                var icon = row.TrendDirection == "up" ? "▲" : (row.TrendDirection == "down" ? "▼" : "—");
                                <tr>
                                    <td>@row.Condition</td>
                                    <td>@row.CasesThisMonth</td>
                                    <td>@row.PercentOfTotal.ToString("0.0")%</td>
                                    <td>@row.LastMonthCases</td>
                                    <td class="@cls">@icon</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js"></script>
    <script>
        // Toggle between monthly and yearly views
        function toggleViewType() {
            const viewType = document.getElementById('viewType').value;
            
            // Submit the appropriate form to reload the page with the new view type
            if (viewType === 'yearly') {
                // Create a form to submit yearly view
                const form = document.createElement('form');
                form.method = 'get';
                form.action = window.location.pathname;
                
                const viewInput = document.createElement('input');
                viewInput.type = 'hidden';
                viewInput.name = 'view';
                viewInput.value = 'yearly';
                form.appendChild(viewInput);
                
                const yearInput = document.createElement('input');
                yearInput.type = 'hidden';
                yearInput.name = 'year';
                yearInput.value = '@Model.SelectedYearLabel';
                form.appendChild(yearInput);
                
                document.body.appendChild(form);
                form.submit();
            } else {
                // Create a form to submit monthly view
                const form = document.createElement('form');
                form.method = 'get';
                form.action = window.location.pathname;
                
                const viewInput = document.createElement('input');
                viewInput.type = 'hidden';
                viewInput.name = 'view';
                viewInput.value = 'monthly';
                form.appendChild(viewInput);
                
                const monthInput = document.createElement('input');
                monthInput.type = 'hidden';
                monthInput.name = 'month';
                monthInput.value = '@Model.SelectedMonthLabel';
                form.appendChild(monthInput);
                
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
    <script>
        const topLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopConditionStats.Select(s => s.Condition)));
        const topValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TopConditionStats.Select(s => s.CasesThisMonth)));
        const trendLabels = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TrendLabels));
        const trendValues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.TrendValues));
        const isYearly = '@Model.ViewType' === 'yearly';
        const periodLabel = isYearly ? '@Model.SelectedYearLabel' : '@Model.SelectedMonthLabel';

        const primary = getComputedStyle(document.documentElement).getPropertyValue('--primary').trim();
        const gray200 = getComputedStyle(document.documentElement).getPropertyValue('--gray-200').trim();

        // Top conditions (pie if <=5 otherwise bar)
        const isPie = topLabels.length <= 5;
        const palette = [primary, '#ff9e42', '#ffd1a3', '#a0aec0', '#93c5fd', '#86efac'];
        const ctx1 = document.getElementById('topConditionsChart');
        new Chart(ctx1, {
            type: isPie ? 'pie' : 'bar',
            data: {
                labels: topLabels,
                datasets: [{
                    label: 'Cases',
                    data: topValues,
                    backgroundColor: isPie ? palette.slice(0, Math.max(topLabels.length,1)) : palette[0],
                    borderWidth: 0
                }]
            },
            options: {
                plugins: { legend: { display: isPie } },
                scales: isPie ? {} : { y: { beginAtZero: true, grid: { color: gray200 } }, x: { grid: { display:false } } }
            }
        });

        // Trend (line)
        const ctx2 = document.getElementById('trendChart');
        new Chart(ctx2, {
            type: 'line',
            data: { labels: trendLabels, datasets: [{ label: 'Total Cases', data: trendValues, borderColor: primary, backgroundColor: 'rgba(255,122,0,.15)', tension: .3, fill: true, pointRadius: 3 }] },
            options: { scales: { y: { beginAtZero: true, grid: { color: gray200 } }, x: { grid: { display:false } } } }
        });

        // Export Excel with enhanced formatting
        document.getElementById('btnExportExcel').addEventListener('click', () => {
            // Create a more comprehensive Excel-compatible CSV
            const reportTitle = (isYearly ? 'Yearly Sickness Tracker - ' : 'Monthly Sickness Tracker - ') + periodLabel;
            const generatedDate = new Date().toLocaleDateString();
            const casesLabel = isYearly ? 'Cases This Year' : 'Cases This Month';
            const prevCasesLabel = isYearly ? 'Last Year Cases' : 'Last Month Cases';
            
            const csvContent = [
                // Header section
                [reportTitle],
                [`Generated on: ${generatedDate}`],
                [''],
                ['TOP DIAGNOSED CONDITIONS'],
                ['Condition', casesLabel, '% of Total', prevCasesLabel, 'Trend'],
                // Data rows
                @foreach (var r in Model.TopConditionStats)
                {
                    <text>["@r.Condition", "@r.CasesThisMonth", "@r.PercentOfTotal.ToString("0.0")%", "@r.LastMonthCases", "@r.TrendDirection"],</text>
                }
                [''],
                [isYearly ? 'SICKNESS TREND (PAST YEARS)' : 'SICKNESS TREND (PAST MONTHS)'],
                [isYearly ? 'Year' : 'Month', 'Total Cases'],
                @for (int i = 0; i < Model.TrendLabels.Count; i++)
                {
                    <text>["@Model.TrendLabels[i]", "@Model.TrendValues[i]"],</text>
                }
                [''],
                ['SUMMARY STATISTICS'],
                ['Metric', 'Value'],
                ['Total Conditions Tracked', '@Model.TopConditionStats.Count'],
                ['Total Cases ' + (isYearly ? 'This Year' : 'This Month'), '@Model.TopConditionStats.Sum(c => c.CasesThisMonth)'],
                ['Average Cases per Condition', '@(Model.TopConditionStats.Count > 0 ? (Model.TopConditionStats.Sum(c => c.CasesThisMonth) / (double)Model.TopConditionStats.Count).ToString("0.0") : "0")'],
                [''],
                ['NOTES'],
                ['This report contains sickness tracking data for ' + periodLabel + '.'],
                ['Trend indicators: up = increasing, down = decreasing, flat = no change.'],
                ['Generated by Barangay Health Care System.']
            ];
            
            // Convert to CSV format with proper escaping
            const csv = csvContent.map(row => 
                row.map(cell => {
                    const cellStr = String(cell || '');
                    // Escape quotes and wrap in quotes if contains comma, quote, or newline
                    if (cellStr.includes('"') || cellStr.includes(',') || cellStr.includes('\n')) {
                        return '"' + cellStr.replace(/"/g, '""') + '"';
                    }
                    return cellStr;
                }).join(',')
            ).join('\n');
            
            // Create and download the file
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            const csvFileBase = 'SicknessReport-' + (isYearly ? 'Yearly-' : 'Monthly-') + periodLabel;
            a.download = csvFileBase.replace(/\s+/g,'_') + '.csv';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        });

        // Export PDF with Minimal Pro layout
        document.getElementById('btnExportPdf').addEventListener('click', async () => {
            const { jsPDF } = window.jspdf;
            const pdf = new jsPDF('p', 'mm', 'a4');

            // Colors and fonts
            pdf.setFont('helvetica');
            const primary = [255, 122, 0];
            const text = [43, 47, 51];
            const muted = [107, 114, 128];
            const soft = [248, 249, 250];

            // Header (minimal)
            pdf.setFillColor(primary[0], primary[1], primary[2]);
            pdf.rect(0, 0, 210, 20, 'F');
            pdf.setTextColor(255, 255, 255);
            pdf.setFontSize(16);
            pdf.setFont('helvetica', 'bold');
            pdf.text(isYearly ? 'Yearly Sickness Tracker' : 'Monthly Sickness Tracker', 15, 14);
            pdf.setFontSize(9);
            pdf.setFont('helvetica', 'normal');
            pdf.text(periodLabel, 15, 18);
            pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 150, 18);

            // Reset text color
            pdf.setTextColor(text[0], text[1], text[2]);
            let y = 28;

            // Metrics (KPIs)
            const stats = @Html.Raw(Json.Serialize(Model.TopConditionStats.Select(s => new { condition = s.Condition, cases = s.CasesThisMonth, pct = s.PercentOfTotal, last = s.LastMonthCases, trend = s.TrendDirection })));
            const trendVals = @Html.Raw(Json.Serialize(Model.TrendValues));
            const totalCases = stats.reduce((sum, s) => sum + s.cases, 0);
            const uniqueConditions = stats.length;
            const topCondition = stats.length ? stats.slice().sort((a,b)=>b.cases-a.cases)[0].condition : 'N/A';
            const currentTotal = trendVals.length ? trendVals[trendVals.length - 1] : totalCases;
            const previousTotal = trendVals.length > 1 ? trendVals[trendVals.length - 2] : 0;
            const changePct = previousTotal ? ((currentTotal - previousTotal) / previousTotal) * 100 : 0;
            const changeText = (changePct >= 0 ? '▲ ' : '▼ ') + Math.abs(changePct).toFixed(1) + '% ' + (isYearly ? '(vs last year)' : '(vs last month)');

            const kpi = [
                { label: 'Total Cases', value: String(totalCases) },
                { label: 'Unique Conditions', value: String(uniqueConditions) },
                { label: 'Top Condition', value: topCondition || 'N/A' },
                { label: 'Change', value: changeText }
            ];

            const kpiW = 45, kpiH = 18, gap = 5; let x = 15;
            kpi.forEach((item, idx) => {
                pdf.setFillColor(soft[0], soft[1], soft[2]);
                pdf.rect(x, y, kpiW, kpiH, 'F');
                pdf.setFontSize(7); pdf.setTextColor(muted[0], muted[1], muted[2]);
                pdf.text(item.label, x + 3, y + 6);
                pdf.setFont('helvetica', 'bold'); pdf.setFontSize(11); pdf.setTextColor(text[0], text[1], text[2]);
                const val = item.value.length > 26 ? item.value.substring(0, 24) + '…' : item.value;
                pdf.text(val, x + 3, y + 13);
                pdf.setFont('helvetica', 'normal');
                x += kpiW + gap;
            });
            y += kpiH + 10;

            // Top Diagnosed Conditions (table with progress)
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(12);
            pdf.text('Top Diagnosed Conditions', 15, y);
            y += 7;
            pdf.setFillColor(soft[0], soft[1], soft[2]);
            pdf.rect(15, y - 5, 180, 7, 'F');
            pdf.setFontSize(9); pdf.setTextColor(muted[0], muted[1], muted[2]);
            pdf.text('Condition', 17, y);
            pdf.text('Cases', 97, y);
            pdf.text('% of Total', 122, y);
            pdf.text('Progress', 152, y);
            y += 6; pdf.setTextColor(text[0], text[1], text[2]);

            const top5 = stats.slice().sort((a,b)=>b.cases-a.cases).slice(0,5);
            top5.forEach(s => {
                pdf.setFontSize(9);
                pdf.text(String(s.condition), 17, y);
                pdf.text(String(s.cases), 97, y);
                pdf.text(`${(s.pct || 0).toFixed(1)}%`, 122, y);
                // progress bar
                const barX = 150, barY = y - 3, barW = 42, barH = 4;
                pdf.setFillColor(235, 236, 240); pdf.rect(barX, barY, barW, barH, 'F');
                const fillW = Math.max(0, Math.min(barW, (s.pct || 0) / 100 * barW));
                pdf.setFillColor(primary[0], primary[1], primary[2]); pdf.rect(barX, barY, fillW, barH, 'F');
                y += 7;
            });

            y += 4;
            // Trend sparkline (minimal)
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(12);
            pdf.text(isYearly ? 'Sickness Trend (Past Years)' : 'Sickness Trend (Past Months)', 15, y);
            y += 6;
            const sparkX = 15, sparkW = 180, sparkH = 22, sparkY = y + sparkH;
            if (trendVals.length > 0) {
                const maxV = Math.max(...trendVals), minV = Math.min(...trendVals);
                const range = (maxV - minV) || 1;
                pdf.setDrawColor(primary[0], primary[1], primary[2]);
                pdf.setLineWidth(1.2);
                for (let i = 0; i < trendVals.length - 1; i++) {
                    const x1 = sparkX + (i / (trendVals.length - 1)) * sparkW;
                    const y1 = sparkY - ((trendVals[i] - minV) / range) * sparkH;
                    const x2 = sparkX + ((i + 1) / (trendVals.length - 1)) * sparkW;
                    const y2 = sparkY - ((trendVals[i + 1] - minV) / range) * sparkH;
                    pdf.line(x1, y1, x2, y2);
                }
            } else {
                pdf.setFontSize(9); pdf.setTextColor(muted[0], muted[1], muted[2]);
                pdf.text('No trend data available', 15, y + 10);
                pdf.setTextColor(text[0], text[1], text[2]);
            }
            y += sparkH + 10;

            // Breakdown table (detailed)
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(12);
            pdf.text(isYearly ? 'Yearly Breakdown' : 'Monthly Breakdown', 15, y);
            y += 8;
            pdf.setFillColor(soft[0], soft[1], soft[2]); pdf.rect(15, y - 5, 180, 7, 'F');
            pdf.setFontSize(9); pdf.setTextColor(muted[0], muted[1], muted[2]);
            const headers = ['Condition', (isYearly ? 'Cases This Year' : 'Cases This Month'), '% of Total', (isYearly ? 'Last Year Cases' : 'Last Month Cases'), 'Trend'];
            const widths = [60, 30, 25, 30, 20]; let colX = 15;
            headers.forEach((h) => { pdf.text(h, colX + 2, y); colX += widths.shift(); });
            // Reset widths for rows
            const rw = [60, 30, 25, 30, 20];
            y += 7; pdf.setTextColor(text[0], text[1], text[2]); pdf.setFont('helvetica', 'normal'); pdf.setFontSize(8);

            stats.forEach((r) => {
                let cx = 15; const rowH = 6;
                pdf.text(String(r.condition), cx + 2, y); cx += rw[0];
                pdf.text(String(r.cases), cx + 2, y); cx += rw[1];
                pdf.text(`${(r.pct || 0).toFixed(1)}%`, cx + 2, y); cx += rw[2];
                pdf.text(String(r.last ?? 0), cx + 2, y); cx += rw[3];
                // arrow
                if (r.trend === 'up') { pdf.setTextColor(46, 125, 50); pdf.text('↗', cx + 8, y); }
                else if (r.trend === 'down') { pdf.setTextColor(198, 40, 40); pdf.text('↘', cx + 8, y); }
                else { pdf.setTextColor(muted[0], muted[1], muted[2]); pdf.text('→', cx + 8, y); }
                pdf.setTextColor(text[0], text[1], text[2]);
                y += rowH;
                if (y > 270) { // new page if needed
                    pdf.addPage(); y = 20;
                }
            });

            // Footer + page numbers
            const pageCount = pdf.internal.getNumberOfPages();
            for (let i = 1; i <= pageCount; i++) {
                pdf.setPage(i);
                pdf.setFontSize(8); pdf.setTextColor(muted[0], muted[1], muted[2]);
                pdf.text('This report was generated automatically by the Barangay Health Care System.', 15, 285);
                pdf.text('For questions or concerns, please contact the system administrator.', 15, 290);
                pdf.text(`Page ${i} of ${pageCount}`, 195, 290, { align: 'right' });
            }

            // Save
            const fileBase = 'SicknessReport-' + (isYearly ? 'Yearly-' : 'Monthly-') + periodLabel;
            pdf.save(fileBase.replace(/\s+/g,'_') + '.pdf');
        });
    </script>
}
    