@page
@model Barangay.Pages.Doctor.DoctorDashboardModel
@{
    ViewData["Title"] = "Doctor Dashboard";
    Layout = "/Pages/Shared/_DoctorLayout.cshtml";
}

<style>
    .card {
        transition: transform 0.2s, box-shadow 0.2s;
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }

    .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .list-group-item {
        transition: background-color 0.2s;
    }

    .list-group-item:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }

    .refresh-indicator {
        font-size: 0.9rem;
        color: #1976D2;
    }

    .refresh-indicator i {
        margin-right: 0.5rem;
    }

    @@media (max-width: 768px) {
        .btn-toolbar {
            margin-top: 1rem;
            width: 100%;
        }

        .btn-toolbar .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
    }
</style>

<!-- Profile and Action Buttons -->
<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3">
    <div class="profile-section">
        <div class="d-flex align-items-center mb-3">
            <div class="profile-image me-3">
                <i class="fas fa-user-circle" style="font-size: 3rem;"></i>
            </div>
            <div>
                <h1 class="h3 mb-0">Welcome, @Model.DoctorName!</h1>
                <p class="text-muted mb-0">@Model.DoctorEmail</p>
                <small class="text-secondary">@Model.DoctorSpecialization</small>
            </div>
        </div>
    </div>
    <div class="btn-toolbar mb-2 mb-md-0">
        <a href="/Doctor/Prescription/Create" class="btn btn-primary me-2">
            <i class="fas fa-file-medical me-1"></i> Write Prescription
        </a>
        <button type="button" class="btn btn-outline-secondary" onclick="location.reload()">
            <i class="fas fa-sync-alt me-1"></i> Refresh
        </button>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row g-3 mb-4">
    <div class="col-sm-6 col-xl-3">
        <a href="/Doctor/PatientList" class="text-decoration-none">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-users h1 mb-0"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title mb-0">Total Patients</h6>
                            <h2 class="display-6 mb-0">@Model.TotalPatients</h2>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-sm-6 col-xl-3">
        <a href="/Doctor/ConsultedList" class="text-decoration-none">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-check-circle h1 mb-0"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title mb-0">Consulted</h6>
                            <h2 class="display-6 mb-0">@Model.Consulted</h2>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-sm-6 col-xl-3">
        <a href="/Doctor/PendingAppointments" class="text-decoration-none">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-clock h1 mb-0"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title mb-0">Pending</h6>
                            <h2 class="display-6 mb-0">@Model.Pending</h2>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-sm-6 col-xl-3">
        <a href="/Doctor/UrgentCases" class="text-decoration-none">
            <div class="card bg-danger text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-triangle h1 mb-0"></i>
                        </div>
                        <div class="flex-grow-1 ms-3">
                            <h6 class="card-title mb-0">Urgent Cases</h6>
                            <h2 class="display-6 mb-0">@Model.UrgentCases</h2>
                        </div>
                    </div>
                </div>
            </div>
        </a>
    </div>
</div>

<div class="row">
    <!-- Recent Notifications -->
    <div class="col-12">
        <div class="card h-100">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-bell me-2"></i>
                    Recent Notifications
                </h5>
                <span class="badge bg-primary rounded-pill">@Model.RecentNotifications.Count</span>
            </div>
            <div class="card-body">
                @if (!Model.RecentNotifications.Any())
                {
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-bell-slash fa-2x mb-2"></i>
                        <p class="mb-0">No new notifications</p>
                    </div>
                }
                else
                {
                    <div class="list-group list-group-flush">
                        @foreach (var notification in Model.RecentNotifications)
                        {
                            <div class="list-group-item px-0">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@notification.Title</h6>
                                    <small class="text-muted">
                                        @notification.CreatedAt.ToString("MMM dd, HH:mm")
                                    </small>
                                </div>
                                <p class="mb-1">@notification.Message</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Auto-refresh functionality
        document.addEventListener('DOMContentLoaded', function() {
            const refreshInterval = 30000; // 30 seconds
            let refreshTimer;
            let lastActivity = Date.now();
            let isPageVisible = !document.hidden;

            // Create refresh indicator
            const indicator = document.createElement('div');
            indicator.className = 'refresh-indicator';
            indicator.innerHTML = '<i class="fas fa-sync-alt"></i> Auto-refreshing...';
            indicator.style.cssText = `
                position: fixed;
                bottom: 1rem;
                right: 1rem;
                z-index: 1040;
                background: rgba(255, 255, 255, 0.9);
                padding: 0.5rem 1rem;
                border-radius: 5px;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
                display: none;
            `;
            document.body.appendChild(indicator);

            function showRefreshIndicator() {
                indicator.style.display = 'block';
                indicator.querySelector('i').classList.add('fa-spin');
            }

            function hideRefreshIndicator() {
                indicator.style.display = 'none';
                indicator.querySelector('i').classList.remove('fa-spin');
            }

            function refreshPage() {
                if (isPageVisible && Date.now() - lastActivity < 300000) { // 5 minutes
                    showRefreshIndicator();
                    fetch(window.location.href)
                        .then(response => response.text())
                        .then(html => {
                            const parser = new DOMParser();
                            const doc = parser.parseFromString(html, 'text/html');
                            
                            // Update statistics cards
                            const cards = document.querySelectorAll('.card .display-6');
                            const newCards = doc.querySelectorAll('.card .display-6');
                            cards.forEach((card, index) => {
                                if (newCards[index]) {
                                    card.textContent = newCards[index].textContent;
                                }
                            });

                            // Update notifications
                            const notificationsContainer = document.querySelector('.list-group');
                            const newNotifications = doc.querySelector('.list-group');
                            if (notificationsContainer && newNotifications) {
                                notificationsContainer.innerHTML = newNotifications.innerHTML;
                            }

                            hideRefreshIndicator();
                        })
                        .catch(() => {
                            hideRefreshIndicator();
                        });
                }
            }

            // Start refresh timer
            function startRefreshTimer() {
                clearInterval(refreshTimer);
                refreshTimer = setInterval(refreshPage, refreshInterval);
            }

            // Track user activity
            function updateLastActivity() {
                lastActivity = Date.now();
            }

            // Handle visibility change
            document.addEventListener('visibilitychange', function() {
                isPageVisible = !document.hidden;
                if (isPageVisible) {
                    refreshPage();
                    startRefreshTimer();
                } else {
                    clearInterval(refreshTimer);
                }
            });

            // Track user activity
            ['mousemove', 'keydown', 'click', 'scroll', 'touchstart'].forEach(event => {
                document.addEventListener(event, updateLastActivity);
            });

            // Initial setup
            startRefreshTimer();
        });
    </script>
}