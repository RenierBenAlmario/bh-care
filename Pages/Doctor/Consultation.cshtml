@page
@using Barangay.Models
@model Barangay.Pages.Doctor.ConsultationModel
@{
    ViewData["Title"] = "Patient Consultation";
    Layout = "_DoctorLayout";
}

<div class="container-fluid px-4">
    <h2 class="mt-4">Patient Consultation</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["WarningMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            @TempData["WarningMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["InfoMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @TempData["InfoMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.IsDataLoaded)
    {
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Consultation Queue (Today & Tomorrow)</h4>
            </div>
            <div class="card-body">
                @if (Model.ConsultationQueue != null && Model.ConsultationQueue.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Patient Name</th>
                                    <th>Time</th>
                                    <th>Type</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var appointment in Model.ConsultationQueue)
                                {
                                    <tr>
                                        <td>@appointment.Patient.User.FullName</td>
                                        <td>@(appointment.AppointmentTime.ToString(@"hh\:mm"))</td>
                                        <td>@appointment.Type</td>
                                        <td>
                                            @{
                                                string badgeClass = appointment.Status switch
                                                {
                                                    AppointmentStatus.Draft => "bg-secondary",
                                                    AppointmentStatus.Pending => "bg-warning text-dark",
                                                    AppointmentStatus.Confirmed => "bg-info text-dark",
                                                    AppointmentStatus.InProgress => "bg-primary",
                                                    AppointmentStatus.Completed => "bg-success",
                                                    AppointmentStatus.Cancelled => "bg-danger",
                                                    _ => "bg-secondary"
                                                };
                                            }
                                            <span class="badge @badgeClass">@appointment.Status</span>
                                        </td>
                                        <td>
                                            <a class="btn btn-sm btn-primary" asp-page="/Doctor/Consultation" asp-route-id="@appointment.Id" asp-route-patientId="@appointment.PatientId">
                                                <i class="fas fa-play-circle me-1"></i> Start Consultation
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h4 class="text-muted">No patients in the consultation queue.</h4>
                        <p class="text-muted">Today's and tomorrow's scheduled appointments will appear here.</p>
                    </div>
                }
            </div>
        </div>
    }
    else if (Model.IsDataLoaded && Model.Patient != null && Model.Appointment != null)
    {
        <div class="row">
            <div class="col-md-12 mb-4">
                <div class="d-flex justify-content-between align-items-center">
                    <h3>Patient Consultation</h3>

                </div>
            </div>

                <div class="col-md-4">
                    <!-- Patient Information Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="mb-0">Patient Information</h5>
                        </div>
                        <div class="card-body">
                            <h4>@Model.Patient?.FullName</h4>
                            <p><strong>Address:</strong> @(string.IsNullOrEmpty(Model.Patient?.Address) ? "Not specified" : Model.Patient.Address)</p>
                            <p><strong>Contact #:</strong> @(string.IsNullOrEmpty(Model.Patient?.ContactNumber) ? "Not specified" : Model.Patient.ContactNumber)</p>
                            <p><strong>Emergency Contact #:</strong> @(string.IsNullOrEmpty(Model.Patient?.EmergencyContactNumber) ? "Not specified" : Model.Patient.EmergencyContactNumber)</p>
                            <p><strong>Medical History:</strong> @(string.IsNullOrEmpty(Model.Patient?.MedicalHistory) ? "Not specified" : Model.Patient.MedicalHistory)</p>
                        </div>
                    </div>

                    <!-- Vital Signs Card -->
                    <div class="card mb-4">
                        <div class="card-header">
                        <h5 class="mb-0">Vital Signs</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.LatestVitalSigns != null)
                        {
                            <p><strong>BP:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.BloodPressure) ? "Not recorded" : Model.LatestVitalSigns.BloodPressure)</p>
                            <p><strong>Temp:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.Temperature) ? "Not recorded" : $"{Model.LatestVitalSigns.Temperature} Â°C")</p>
                            <p><strong>HR:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.HeartRate) ? "Not recorded" : $"{Model.LatestVitalSigns.HeartRate} bpm")</p>
                            <p><strong>SpO2:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.SpO2) ? "Not recorded" : $"{Model.LatestVitalSigns.SpO2}%")</p>
                            <p><strong>Weight:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.Weight) ? "Not recorded" : $"{Model.LatestVitalSigns.Weight} kg")</p>
                            <p><strong>Height:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.Height) ? "Not recorded" : $"{Model.LatestVitalSigns.Height} cm")</p>
                        }
                        else
                        {
                            <p>No vital signs recorded.</p>
                        }
                    </div>
                </div>

                <!-- Appointment Info Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Appointment Info</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Date:</strong> @Model.Appointment.AppointmentDate.ToString("MMMM dd, yyyy")</p>
                        <p><strong>Time:</strong> @(Model.Appointment.AppointmentTime != default ? Model.Appointment.AppointmentTime.ToString(@"hh\:mm") : "Not specified")</p>
                        <p><strong>Status:</strong> @Model.Appointment.Status</p>
                    </div>
                </div>
            </div>

            <!-- Consultation Form -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Consultation & Prescription</h5>
                    </div>
                    <div class="card-body">
                        <form method="post" id="consultationForm">
                            <input type="hidden" asp-for="AppointmentId" />
                            <input type="hidden" asp-for="PatientId" />
                            <input type="hidden" asp-for="PatientId" />

                            <!-- Validation Summary -->
                            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                            <!-- Chief Complaint -->
                            <div class="form-group mb-3">
                                <label for="ChiefComplaint">Chief Complaint</label>
                                <textarea asp-for="ChiefComplaint" class="form-control" id="ChiefComplaint" rows="3" required></textarea>
                                <span asp-validation-for="ChiefComplaint" class="text-danger"></span>
                            </div>

                            <!-- Diagnosis -->
                            <div class="form-group mb-3">
                                <label for="Diagnosis">Diagnosis</label>
                                <textarea asp-for="Diagnosis" class="form-control" id="Diagnosis" rows="3" required></textarea>
                                <span asp-validation-for="Diagnosis" class="text-danger"></span>
                            </div>

                            <!-- Treatment Plan -->
                            <div class="form-group mb-3">
                                <label for="Treatment">Treatment Plan</label>
                                <textarea asp-for="Treatment" class="form-control" id="Treatment" rows="3" required></textarea>
                                <span asp-validation-for="Treatment" class="text-danger"></span>
                            </div>

                            <!-- Additional Notes -->
                            <div class="form-group mb-3">
                                <label for="Notes">Additional Notes</label>
                                <textarea asp-for="Notes" class="form-control" id="Notes" rows="2"></textarea>
                                <span asp-validation-for="Notes" class="text-danger"></span>
                            </div>

                            <!-- Follow-up Appointment Reason -->
                            <div class="form-group mb-3">
                                <label for="FollowUpReason">Reason for Follow-up Appointment</label>
                                <textarea asp-for="FollowUpReason" class="form-control" id="FollowUpReason" rows="2" placeholder="e.g., Follow-up check-up, medication review, progress monitoring, etc."></textarea>
                                <span asp-validation-for="FollowUpReason" class="text-danger"></span>
                                <small class="form-text text-muted">If a follow-up appointment is needed, please specify the reason. This will be included in the appointment reminder email.</small>
                            </div>

                            <!-- Follow-up Appointment Date and Time -->
                            <div class="row" id="followUpDateTimeSection" style="display: none;">
                                <div class="col-md-6">
                                    <div class="form-group mb-3">
                                        <label for="FollowUpDate">Follow-up Appointment Date</label>
                                        <input asp-for="FollowUpDate" type="date" class="form-control" id="FollowUpDate" min="@DateTime.Today.AddDays(1).ToString("yyyy-MM-dd")" value="@DateTime.Today.AddDays(7).ToString("yyyy-MM-dd")" />
                                        <span asp-validation-for="FollowUpDate" class="text-danger"></span>
                                        <small class="form-text text-muted">Default: 7 days from today</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group mb-3">
                                        <label for="FollowUpTime">Follow-up Appointment Time</label>
                                        <input asp-for="FollowUpTime" type="time" class="form-control" id="FollowUpTime" value="@Model.Appointment?.AppointmentTime.ToString(@"hh\:mm")" />
                                        <span asp-validation-for="FollowUpTime" class="text-danger"></span>
                                        <small class="form-text text-muted">Default: Same time as current appointment</small>
                                    </div>
                                </div>
                            </div>

                            <!-- Prescribe Section -->
                            <div class="form-group mb-3">
                                <label for="Prescribe">Prescribe</label>
                                <textarea asp-for="Prescribe" class="form-control" id="Prescribe" rows="4" placeholder="Enter prescription details, medications, dosage instructions, etc."></textarea>
                                <span asp-validation-for="Prescribe" class="text-danger"></span>
                                <small class="form-text text-muted">Optional: Prescription details will be included in the consultation summary email.</small>
                            </div>

                            <!-- Submit Button -->
                            <div class="d-flex justify-content-between">
                                <a href="/Doctor/Appointments" class="btn btn-secondary">
                                    <i class="fas fa-arrow-left me-1"></i> Back to Appointments
                                </a>
                                <div>
                                    <button type="submit" class="btn btn-primary" id="completeConsultationBtn">
                                        <i class="fas fa-save me-1"></i> Save Consultation
                                    </button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Fallback for any unexpected state -->
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Data Loading Issue</h4>
            <p>There was an issue loading the consultation data. Please try again or contact support if the problem persists.</p>
            <hr>
            <a href="/Doctor/Appointments" class="btn btn-primary">Return to Appointments</a>
        </div>
    }
</div>

<!-- Print Summary Content (Hidden) -->
<div id="printSummary" class="d-none">
    <div style="max-width: 800px; margin: 20px auto; padding: 20px; font-family: Arial, sans-serif;">
        <div style="text-align: center; margin-bottom: 30px;">
            <h2 style="margin: 0;">Barangay Health Center</h2>
            <p style="margin: 5px 0;">Consultation Summary</p>
            <p style="margin: 5px 0;">Date: @(Model.Appointment?.AppointmentDate.ToString("MMMM dd, yyyy") ?? DateTime.Today.ToString("MMMM dd, yyyy"))</p>
            <p style="margin: 5px 0;">Time: @(Model.Appointment?.AppointmentTime != default ? Model.Appointment.AppointmentTime.ToString(@"hh\:mm") : "Not specified")</p>
        </div>

        <div style="margin-bottom: 20px;">
            <h3 style="border-bottom: 1px solid #ccc; padding-bottom: 5px;">Patient Information</h3>
            <p><strong>Name:</strong> @(Model.Patient?.FullName ?? "Not specified")</p>
            <p><strong>Contact:</strong> @(string.IsNullOrEmpty(Model.Patient?.ContactNumber) ? "Not specified" : Model.Patient.ContactNumber)</p>
            <p><strong>Medical History:</strong> @(string.IsNullOrEmpty(Model.Patient?.MedicalHistory) ? "Not specified" : Model.Patient.MedicalHistory)</p>
        </div>

        <div style="margin-bottom: 20px;">
            <h3 style="border-bottom: 1px solid #ccc; padding-bottom: 5px;">Consultation Details</h3>
            <p><strong>Chief Complaint:</strong> <span id="printChiefComplaint">@Model.ChiefComplaint</span></p>
            <p><strong>Diagnosis:</strong> <span id="printDiagnosis">@Model.Diagnosis</span></p>
            <p><strong>Treatment Plan:</strong> <span id="printTreatment">@Model.Treatment</span></p>
            <p><strong>Additional Notes:</strong> <span id="printNotes">@(string.IsNullOrEmpty(Model.Notes) ? "None" : Model.Notes)</span></p>
            @if (!string.IsNullOrEmpty(Model.FollowUpReason))
            {
                <p><strong>Follow-up Appointment Reason:</strong> <span id="printFollowUpReason">@Model.FollowUpReason</span></p>
                @if (Model.FollowUpDate.HasValue)
                {
                    <p><strong>Follow-up Appointment Date:</strong> <span id="printFollowUpDate">@Model.FollowUpDate.Value.ToString("MMMM dd, yyyy")</span></p>
                }
                @if (Model.FollowUpTime.HasValue)
                {
                    <p><strong>Follow-up Appointment Time:</strong> <span id="printFollowUpTime">@Model.FollowUpTime.Value.ToString(@"hh\:mm")</span></p>
                }
            }
            @if (!string.IsNullOrEmpty(Model.Prescribe))
            {
                <p><strong>Prescription:</strong> <span id="printPrescribe">@Model.Prescribe</span></p>
            }
        </div>


        <div style="margin-top: 40px;">
            <div style="margin-bottom: 20px;">
                <p style="margin: 0;">_____________________________</p>
                <p style="margin: 5px 0;">Doctor's Signature</p>
            </div>
            <p style="font-size: 12px; color: #666; margin-top: 30px; text-align: center;">
                This is a confidential medical record. Unauthorized disclosure or misuse of this information is prohibited.
            </p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Form validation and submission handling
        document.addEventListener('DOMContentLoaded', function() {
            const consultationForm = document.getElementById('consultationForm');
            const completeConsultationBtn = document.getElementById('completeConsultationBtn');
            const followUpReasonField = document.getElementById('FollowUpReason');
            const followUpDateTimeSection = document.getElementById('followUpDateTimeSection');
            
            // Initially hide follow-up date/time fields
            if (followUpDateTimeSection) {
                followUpDateTimeSection.style.display = 'none';
            }
            
            // Show/hide follow-up date/time fields based on reason input
            function toggleFollowUpFields() {
                const reasonValue = followUpReasonField.value.trim();
                if (followUpDateTimeSection) {
                    if (reasonValue.length > 0) {
                        followUpDateTimeSection.style.display = 'block';
                    } else {
                        followUpDateTimeSection.style.display = 'none';
                    }
                }
            }
            
            // Add event listener to follow-up reason field
            if (followUpReasonField) {
                followUpReasonField.addEventListener('input', toggleFollowUpFields);
                // Check initial state
                toggleFollowUpFields();
            }
            
            if (consultationForm) {
                consultationForm.addEventListener('submit', function(event) {
                    // Prevent default form submission
                    event.preventDefault();
                    
                    // Validate form
                    if (!validateConsultationForm()) {
                        return false;
                    }
                    
                    // Show loading state
                    if (completeConsultationBtn) {
                        completeConsultationBtn.disabled = true;
                        completeConsultationBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
                    }
                    
                    // Submit the form
                    this.submit();
                });
            }
            
            // Form validation function
            function validateConsultationForm() {
                let isValid = true;
                const requiredFields = ['ChiefComplaint', 'Diagnosis', 'Treatment'];
                
                // Check required fields
                requiredFields.forEach(fieldId => {
                    const field = document.getElementById(fieldId);
                    if (field && !field.value.trim()) {
                        isValid = false;
                        field.classList.add('is-invalid');
                        
                        // Add validation message if not exists
                        let nextSibling = field.nextElementSibling;
                        if (!nextSibling || !nextSibling.classList.contains('invalid-feedback')) {
                            const feedback = document.createElement('div');
                            feedback.className = 'invalid-feedback';
                            feedback.textContent = 'This field is required';
                            field.parentNode.insertBefore(feedback, field.nextSibling);
                        }
                    } else if (field) {
                        field.classList.remove('is-invalid');
                    }
                });
                
                if (!isValid) {
                    // Show error message at the top
                    const validationSummary = document.querySelector('[asp-validation-summary]');
                    if (validationSummary) {
                        validationSummary.innerHTML = '<div class="text-danger">Please fill in all required fields</div>';
                    }
                    return false;
                }
                
                return true;
            }
            
            // Add input event listeners to clear validation errors
            requiredFields = ['ChiefComplaint', 'Diagnosis', 'Treatment'];
            requiredFields.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                    field.addEventListener('input', function() {
                        if (this.value.trim()) {
                            this.classList.remove('is-invalid');
                        }
                    });
                }
            });
        });
        
        // Print summary functionality
        document.getElementById('printSummaryBtn')?.addEventListener('click', function() {
            updatePrintMedications();
            const printContent = document.getElementById('printSummary');
            if (printContent) {
                printContent.classList.remove('d-none');
                window.print();
                printContent.classList.add('d-none');
            }
        });
        
        // Update print summary with dynamic form values
        function updatePrintMedications() {
            // Get form values if we're working with an unsaved form
            const chiefComplaint = document.getElementById('ChiefComplaint')?.value;
            if (chiefComplaint) {
                document.getElementById('printChiefComplaint').textContent = chiefComplaint;
            }
            
            const diagnosis = document.getElementById('Diagnosis')?.value;
            if (diagnosis) {
                document.getElementById('printDiagnosis').textContent = diagnosis;
            }
            
            const treatment = document.getElementById('Treatment')?.value;
            if (treatment) {
                document.getElementById('printTreatment').textContent = treatment;
            }
            
            const notes = document.getElementById('Notes')?.value;
            if (notes) {
                document.getElementById('printNotes').textContent = notes || 'None';
            }
            
            const followUpReason = document.getElementById('FollowUpReason')?.value;
            if (followUpReason) {
                const printFollowUpElement = document.getElementById('printFollowUpReason');
                if (printFollowUpElement) {
                    printFollowUpElement.textContent = followUpReason;
                }
            }
            
            const followUpDate = document.getElementById('FollowUpDate')?.value;
            if (followUpDate) {
                const printFollowUpDateElement = document.getElementById('printFollowUpDate');
                if (printFollowUpDateElement) {
                    const date = new Date(followUpDate);
                    printFollowUpDateElement.textContent = date.toLocaleDateString('en-US', { 
                        year: 'numeric', 
                        month: 'long', 
                        day: 'numeric' 
                    });
                }
            }
            
            const followUpTime = document.getElementById('FollowUpTime')?.value;
            if (followUpTime) {
                const printFollowUpTimeElement = document.getElementById('printFollowUpTime');
                if (printFollowUpTimeElement) {
                    printFollowUpTimeElement.textContent = followUpTime;
                }
            }
            
            const prescribe = document.getElementById('Prescribe')?.value;
            if (prescribe) {
                const printPrescribeElement = document.getElementById('printPrescribe');
                if (printPrescribeElement) {
                    printPrescribeElement.textContent = prescribe;
                }
            }
        }
        
        
        // Optional: Update preview when form changes
        document.getElementById('consultationForm')?.addEventListener('input', function(e) {
            if (e.target.id === 'ChiefComplaint' ||
                e.target.id === 'Diagnosis' ||
                e.target.id === 'Treatment' ||
                e.target.id === 'Notes' ||
                e.target.id === 'FollowUpReason' ||
                e.target.id === 'FollowUpDate' ||
                e.target.id === 'FollowUpTime' ||
                e.target.id === 'Prescribe') {
                // Update the print preview data
                updatePrintMedications();
            }
        });

        // Handle follow-up appointment fields visibility
        function toggleFollowUpFields() {
            const reasonField = document.getElementById('FollowUpReason');
            const dateTimeSection = document.getElementById('followUpDateTimeSection');
            
            if (reasonField && dateTimeSection) {
                if (reasonField.value.trim()) {
                    dateTimeSection.style.display = 'block';
                } else {
                    dateTimeSection.style.display = 'none';
                }
            }
        }

        // Add event listener for follow-up reason field
        document.getElementById('FollowUpReason')?.addEventListener('input', toggleFollowUpFields);
        
        // Initialize on page load
        toggleFollowUpFields();
    </script>
    
    <style>
        @@media print {
            body * { visibility: hidden; }
            #printSummary, #printSummary * { visibility: visible; }
            #printSummary { position: absolute; left: 0; top: 0; width: 100%; }
        }
        
        .is-invalid {
            border-color: #dc3545;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 80%;
            color: #dc3545;
        }
        
        .is-invalid ~ .invalid-feedback {
            display: block;
        }
    </style>
}