@page
@using Barangay.Models
@model Barangay.Pages.Doctor.ConsultationModel
@{
    ViewData["Title"] = "Patient Consultation";
    Layout = "_DoctorLayout";
}

<div class="container-fluid px-4">
    <h2 class="mt-4">Patient Consultation</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["WarningMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            @TempData["WarningMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <h3>Patient Consultation</h3>
                <div>
                    <a asp-page="/Doctor/Appointments" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Records
                    </a>
                    <button id="printSummaryBtn" class="btn btn-outline-primary ms-2">
                        <i class="bi bi-printer"></i> Print Summary
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (!Model.IsDataLoaded)
    {
        <div class="alert alert-warning">
            <p>Unable to load consultation data. Please try again or select a different patient.</p>
            <a asp-page="/Doctor/Appointments" class="btn btn-primary">Return to Appointments</a>
        </div>
    }
    else if (Model.Patient != null && Model.Appointment != null)
    {
        <div class="row">
            <div class="col-md-4">
                <!-- Patient Information Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Patient Information</h5>
                    </div>
                    <div class="card-body">
                        <h4>@Model.Patient?.FullName</h4>
                        <p><strong>Address:</strong> @(string.IsNullOrEmpty(Model.Patient?.Address) ? "Not specified" : Model.Patient.Address)</p>
                        <p><strong>Contact #:</strong> @(string.IsNullOrEmpty(Model.Patient?.ContactNumber) ? "Not specified" : Model.Patient.ContactNumber)</p>
                        <p><strong>Emergency Contact #:</strong> @(string.IsNullOrEmpty(Model.Patient?.EmergencyContactNumber) ? "Not specified" : Model.Patient.EmergencyContactNumber)</p>
                        <p><strong>Medical History:</strong> @(string.IsNullOrEmpty(Model.Patient?.MedicalHistory) ? "Not specified" : Model.Patient.MedicalHistory)</p>
                    </div>
                </div>

                <!-- Vital Signs Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Vital Signs</h5>
                    </div>
                    <div class="card-body">
                        @if (Model.LatestVitalSigns != null)
                        {
                            <p><strong>BP:</strong> @(string.IsNullOrEmpty(Model.LatestVitalSigns.BloodPressure) ? "Not recorded" : Model.LatestVitalSigns.BloodPressure)</p>
                            <p><strong>Temp:</strong> @(Model.LatestVitalSigns.Temperature.HasValue ? $"{Model.LatestVitalSigns.Temperature:F2} Â°C" : "Not recorded")</p>
                            <p><strong>HR:</strong> @(Model.LatestVitalSigns.HeartRate.HasValue ? $"{Model.LatestVitalSigns.HeartRate} bpm" : "Not recorded")</p>
                            <p><strong>SpO2:</strong> @(Model.LatestVitalSigns.SpO2.HasValue ? $"{Model.LatestVitalSigns.SpO2:F2}%" : "Not recorded")</p>
                            <p><strong>Weight:</strong> @(Model.LatestVitalSigns.Weight.HasValue ? $"{Model.LatestVitalSigns.Weight:F2} kg" : "Not recorded")</p>
                            <p><strong>Height:</strong> @(Model.LatestVitalSigns.Height.HasValue ? $"{Model.LatestVitalSigns.Height:F2} cm" : "Not recorded")</p>
                        }
                        else
                        {
                            <p>No vital signs recorded.</p>
                        }
                    </div>
                </div>

                <!-- Appointment Info Card -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Appointment Info</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Date:</strong> @Model.Appointment.AppointmentDate.ToString("MMMM dd, yyyy")</p>
                        <p><strong>Time:</strong> @(Model.Appointment.AppointmentTime != default ? Model.Appointment.AppointmentTime.ToString(@"hh\:mm") : "Not specified")</p>
                        <p><strong>Status:</strong> @Model.Appointment.Status</p>
                    </div>
                </div>
            </div>

            <!-- Consultation Form -->
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Consultation & Prescription</h5>
                    </div>
                    <div class="card-body">
                        <form method="post" id="consultationForm">
                            <input type="hidden" asp-for="AppointmentId" value="@Model.AppointmentId" />
                            <input type="hidden" asp-for="PatientId" value="@Model.PatientId" />

                            <!-- Validation Summary -->
                            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                            <!-- Chief Complaint -->
                            <div class="form-group mb-3">
                                <label for="ChiefComplaint">Chief Complaint</label>
                                <textarea asp-for="ChiefComplaint" class="form-control" id="ChiefComplaint" rows="3" required></textarea>
                                <span asp-validation-for="ChiefComplaint" class="text-danger"></span>
                            </div>

                            <!-- Diagnosis -->
                            <div class="form-group mb-3">
                                <label for="Diagnosis">Diagnosis</label>
                                <textarea asp-for="Diagnosis" class="form-control" id="Diagnosis" rows="3" required></textarea>
                                <span asp-validation-for="Diagnosis" class="text-danger"></span>
                            </div>

                            <!-- Treatment Plan -->
                            <div class="form-group mb-3">
                                <label for="Treatment">Treatment Plan</label>
                                <textarea asp-for="Treatment" class="form-control" id="Treatment" rows="3" required></textarea>
                                <span asp-validation-for="Treatment" class="text-danger"></span>
                            </div>

                            <!-- Additional Notes -->
                            <div class="form-group mb-3">
                                <label for="Notes">Additional Notes</label>
                                <textarea asp-for="Notes" class="form-control" id="Notes" rows="2"></textarea>
                                <span asp-validation-for="Notes" class="text-danger"></span>
                            </div>

                            <!-- Medications Section -->
                            <div class="card mb-3">
                                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">Medications</h5>
                                    <button type="button" class="btn btn-sm btn-success" id="addMedicationBtn">
                                        <i class="bi bi-plus-circle"></i> Add Medication
                                    </button>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-bordered" id="medicationsTable">
                                            <thead class="table-light">
                                                <tr>
                                                    <th>Medicine Name</th>
                                                    <th>Dosage</th>
                                                    <th>Instructions</th>
                                                    <th style="width: 50px;"></th>
                                                </tr>
                                            </thead>
                                            <tbody id="medicationsTableBody">
                                                @if (Model.Medications != null && Model.Medications.Count > 0)
                                                {
                                                    @for (int i = 0; i < Model.Medications.Count; i++)
                                                    {
                                                        <tr class="medication-row">
                                                            <td>
                                                                <input type="text" class="form-control medication-name" name="Medications[@i].MedicationName" 
                                                                    value="@Model.Medications[i].MedicationName" />
                                                            </td>
                                                            <td>
                                                                <input type="text" class="form-control medication-dosage" name="Medications[@i].Dosage" 
                                                                    value="@Model.Medications[i].Dosage" 
                                                                    pattern="^[0-9]*\.?[0-9]+$" 
                                                                    title="Please enter a valid number" 
                                                                    oninput="validateNumericInput(this)" />
                                                                <div class="invalid-feedback">
                                                                    Please enter a valid number for dosage
                                                                </div>
                                                            </td>
                                                            <td>
                                                                <input type="text" class="form-control medication-instructions" name="Medications[@i].Instructions" 
                                                                    value="@Model.Medications[i].Instructions" />
                                                            </td>
                                                            <td>
                                                                <button type="button" class="btn btn-sm btn-danger remove-medication">
                                                                    <i class="bi bi-trash"></i>
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                                else
                                                {
                                                    <tr class="medication-row">
                                                        <td>
                                                            <input type="text" class="form-control medication-name" name="Medications[0].MedicationName" value="" />
                                                        </td>
                                                        <td>
                                                            <input type="text" class="form-control medication-dosage" name="Medications[0].Dosage" value=""
                                                                pattern="^[0-9]*\.?[0-9]+$" 
                                                                title="Please enter a valid number"
                                                                oninput="validateNumericInput(this)" />
                                                            <div class="invalid-feedback">
                                                                Please enter a valid number for dosage
                                                            </div>
                                                        </td>
                                                        <td>
                                                            <input type="text" class="form-control medication-instructions" name="Medications[0].Instructions" value="" />
                                                        </td>
                                                        <td>
                                                            <button type="button" class="btn btn-sm btn-danger remove-medication">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group text-end">
                                <button type="submit" class="btn btn-success" id="completeConsultationBtn">
                                    <i class="bi bi-check-circle"></i> Complete Consultation
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <p>Unable to load patient or appointment data. Please try again or select a different patient.</p>
            <a asp-page="/Doctor/Appointments" class="btn btn-primary">Return to Appointments</a>
        </div>
    }
</div>

<!-- Print Summary Content (Hidden) -->
<div id="printSummary" class="d-none">
    <div style="max-width: 800px; margin: 20px auto; padding: 20px; font-family: Arial, sans-serif;">
        <div style="text-align: center; margin-bottom: 30px;">
            <h2 style="margin: 0;">Barangay Health Center</h2>
            <p style="margin: 5px 0;">Consultation Summary</p>
            <p style="margin: 5px 0;">Date: @(Model.Appointment?.AppointmentDate.ToString("MMMM dd, yyyy") ?? DateTime.Today.ToString("MMMM dd, yyyy"))</p>
            <p style="margin: 5px 0;">Time: @(Model.Appointment?.AppointmentTime != default ? Model.Appointment.AppointmentTime.ToString(@"hh\:mm") : "Not specified")</p>
        </div>

        <div style="margin-bottom: 20px;">
            <h3 style="border-bottom: 1px solid #ccc; padding-bottom: 5px;">Patient Information</h3>
            <p><strong>Name:</strong> @(Model.Patient?.FullName ?? "Not specified")</p>
            <p><strong>Contact:</strong> @(string.IsNullOrEmpty(Model.Patient?.ContactNumber) ? "Not specified" : Model.Patient.ContactNumber)</p>
            <p><strong>Medical History:</strong> @(string.IsNullOrEmpty(Model.Patient?.MedicalHistory) ? "Not specified" : Model.Patient.MedicalHistory)</p>
        </div>

        <div style="margin-bottom: 20px;">
            <h3 style="border-bottom: 1px solid #ccc; padding-bottom: 5px;">Consultation Details</h3>
            <p><strong>Chief Complaint:</strong> <span id="printChiefComplaint">@Model.ChiefComplaint</span></p>
            <p><strong>Diagnosis:</strong> <span id="printDiagnosis">@Model.Diagnosis</span></p>
            <p><strong>Treatment Plan:</strong> <span id="printTreatment">@Model.Treatment</span></p>
            <p><strong>Additional Notes:</strong> <span id="printNotes">@(string.IsNullOrEmpty(Model.Notes) ? "None" : Model.Notes)</span></p>
        </div>

        <div style="margin-bottom: 20px;">
            <h3 style="border-bottom: 1px solid #ccc; padding-bottom: 5px;">Prescribed Medications</h3>
            <table style="width: 100%; border-collapse: collapse; margin-top: 10px;" id="printMedicationsTable">
                <thead>
                    <tr>
                        <th style="border: 1px solid #ccc; padding: 8px; background-color: #f8f9fa;">Medicine Name</th>
                        <th style="border: 1px solid #ccc; padding: 8px; background-color: #f8f9fa;">Dosage</th>
                        <th style="border: 1px solid #ccc; padding: 8px; background-color: #f8f9fa;">Instructions</th>
                    </tr>
                </thead>
                <tbody id="printMedicationsBody">
                    @{
                        var hasMedications = Model.Medications != null && Model.Medications.Any(m => !string.IsNullOrEmpty(m.MedicationName));
                    }
                    
                    @if (hasMedications)
                    {
                        @foreach (var medication in Model.Medications.Where(m => !string.IsNullOrEmpty(m.MedicationName)))
                        {
                            <tr>
                                <td style="border: 1px solid #ccc; padding: 8px;">@medication.MedicationName</td>
                                <td style="border: 1px solid #ccc; padding: 8px;">@medication.Dosage</td>
                                <td style="border: 1px solid #ccc; padding: 8px;">@medication.Instructions</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="3" style="border: 1px solid #ccc; padding: 8px; text-align: center;">No medications prescribed</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div style="margin-top: 40px;">
            <div style="margin-bottom: 20px;">
                <p style="margin: 0;">_____________________________</p>
                <p style="margin: 5px 0;">Doctor's Signature</p>
            </div>
            <p style="font-size: 12px; color: #666; margin-top: 30px; text-align: center;">
                This is a confidential medical record. Unauthorized disclosure or misuse of this information is prohibited.
            </p>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Print summary functionality
        document.getElementById('printSummaryBtn')?.addEventListener('click', function() {
            updatePrintMedications();
            const printContent = document.getElementById('printSummary');
            if (printContent) {
                printContent.classList.remove('d-none');
                window.print();
                printContent.classList.add('d-none');
            }
        });
        
        // Update print summary with dynamic form values
        function updatePrintMedications() {
            // Get form values if we're working with an unsaved form
            const chiefComplaint = document.getElementById('ChiefComplaint')?.value;
            if (chiefComplaint) {
                document.getElementById('printChiefComplaint').textContent = chiefComplaint;
            }
            
            const diagnosis = document.getElementById('Diagnosis')?.value;
            if (diagnosis) {
                document.getElementById('printDiagnosis').textContent = diagnosis;
            }
            
            const treatment = document.getElementById('Treatment')?.value;
            if (treatment) {
                document.getElementById('printTreatment').textContent = treatment;
            }
            
            const notes = document.getElementById('Notes')?.value;
            if (notes) {
                document.getElementById('printNotes').textContent = notes || 'None';
            }
            
            // Get medications from the form
            const medicationRows = document.querySelectorAll('.medication-row');
            
            // Only update if we have form fields and they have values
            if (medicationRows.length > 0) {
                let hasMedications = false;
                let medicationsHtml = '';
                
                medicationRows.forEach(row => {
                    const nameInput = row.querySelector('.medication-name');
                    const name = nameInput ? nameInput.value.trim() : '';
                    
                    if (name) {
                        hasMedications = true;
                        const dosageInput = row.querySelector('.medication-dosage');
                        const instructionsInput = row.querySelector('.medication-instructions');
                        
                        const dosage = dosageInput ? dosageInput.value.trim() : '';
                        const instructions = instructionsInput ? instructionsInput.value.trim() : '';
                        
                        medicationsHtml += `
                            <tr>
                                <td style="border: 1px solid #ccc; padding: 8px;">${name}</td>
                                <td style="border: 1px solid #ccc; padding: 8px;">${dosage}</td>
                                <td style="border: 1px solid #ccc; padding: 8px;">${instructions}</td>
                            </tr>
                        `;
                    }
                });
                
                const printMedicationsBody = document.getElementById('printMedicationsBody');
                if (printMedicationsBody) {
                    if (hasMedications) {
                        printMedicationsBody.innerHTML = medicationsHtml;
                    } else {
                        printMedicationsBody.innerHTML = `
                            <tr>
                                <td colspan="3" style="border: 1px solid #ccc; padding: 8px; text-align: center;">No medications prescribed</td>
                            </tr>
                        `;
                    }
                }
            }
        }
        
        // Add new medication row
        document.getElementById('addMedicationBtn')?.addEventListener('click', function() {
            addMedicationRow();
        });
        
        // Function to add a new medication row
        function addMedicationRow() {
            const tbody = document.getElementById('medicationsTableBody');
            if (!tbody) return;
            
            // Get current number of rows to determine the next index
            const currentRows = tbody.querySelectorAll('.medication-row');
            const nextIndex = currentRows.length;
            
            // Create new row
            const newRow = document.createElement('tr');
            newRow.className = 'medication-row';
            
            // Create the row's content
            newRow.innerHTML = `
                <td>
                    <input type="text" class="form-control medication-name" name="Medications[${nextIndex}].MedicationName" value="" />
                </td>
                <td>
                    <input type="text" class="form-control medication-dosage" name="Medications[${nextIndex}].Dosage" value=""
                        pattern="^[0-9]*\\.?[0-9]+$" 
                        title="Please enter a valid number"
                        oninput="validateNumericInput(this)" />
                    <div class="invalid-feedback">
                        Please enter a valid number for dosage
                    </div>
                </td>
                <td>
                    <input type="text" class="form-control medication-instructions" name="Medications[${nextIndex}].Instructions" value="" />
                </td>
                <td>
                    <button type="button" class="btn btn-sm btn-danger remove-medication">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>
            `;
            
            // Add the row to the table
            tbody.appendChild(newRow);
            
            // Add event listener to the remove button
            const removeBtn = newRow.querySelector('.remove-medication');
            if (removeBtn) {
                removeBtn.addEventListener('click', function() {
                    removeMedicationRow(newRow);
                });
            }
        }
        
        // Function to remove a medication row
        function removeMedicationRow(row) {
            if (!row) return;
            
            row.remove();
            reindexMedicationRows();
        }
        
        // Function to reindex medication rows after a removal
        function reindexMedicationRows() {
            const tbody = document.getElementById('medicationsTableBody');
            if (!tbody) return;
            
            const rows = tbody.querySelectorAll('.medication-row');
            
            rows.forEach((row, index) => {
                const nameInput = row.querySelector('.medication-name');
                const dosageInput = row.querySelector('.medication-dosage');
                const instructionsInput = row.querySelector('.medication-instructions');
                
                if (nameInput) nameInput.name = `Medications[${index}].MedicationName`;
                if (dosageInput) dosageInput.name = `Medications[${index}].Dosage`;
                if (instructionsInput) instructionsInput.name = `Medications[${index}].Instructions`;
            });
        }
        
        // Function to validate numeric input for dosage field
        function validateNumericInput(input) {
            const value = input.value;
            const numericRegex = /^[0-9]*\.?[0-9]*$/;
            
            if (!numericRegex.test(value)) {
                // Remove non-numeric characters
                input.value = value.replace(/[^0-9.]/g, '');
                // Replace multiple dots with single dot
                input.value = input.value.replace(/\.{2,}/g, '.');
                // Only keep the first dot
                const parts = input.value.split('.');
                if (parts.length > 2) {
                    input.value = parts[0] + '.' + parts.slice(1).join('');
                }
                
                input.classList.add('is-invalid');
            } else {
                input.classList.remove('is-invalid');
            }
        }
        
        // Initialize remove buttons for existing rows
        document.addEventListener('DOMContentLoaded', function() {
            const removeButtons = document.querySelectorAll('.remove-medication');
            removeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const row = this.closest('.medication-row');
                    removeMedicationRow(row);
                });
            });
            
            // Initialize validation for existing dosage fields
            const dosageInputs = document.querySelectorAll('.medication-dosage');
            dosageInputs.forEach(input => {
                input.addEventListener('input', function() {
                    validateNumericInput(this);
                });
            });
        });
        
        // Optional: Update preview when form changes
        document.getElementById('consultationForm')?.addEventListener('input', function(e) {
            if (e.target.classList.contains('medication-name') || 
                e.target.classList.contains('medication-dosage') || 
                e.target.classList.contains('medication-instructions') ||
                e.target.id === 'ChiefComplaint' ||
                e.target.id === 'Diagnosis' ||
                e.target.id === 'Treatment' ||
                e.target.id === 'Notes') {
                // Update the print preview data
                updatePrintMedications();
            }
        });
    </script>
    
    <style>
        @@media print {
            body * { visibility: hidden; }
            #printSummary, #printSummary * { visibility: visible; }
            #printSummary { position: absolute; left: 0; top: 0; width: 100%; }
        }
        
        .is-invalid {
            border-color: #dc3545;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }
        
        .invalid-feedback {
            display: none;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 80%;
            color: #dc3545;
        }
        
        .is-invalid ~ .invalid-feedback {
            display: block;
        }
    </style>
}