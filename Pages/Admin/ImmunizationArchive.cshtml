@page
@model Barangay.Pages.Admin.FamilyHealthArchiveModel
@{
    ViewData["Title"] = "Archive";
    Layout = "_AdminLayout";
}

<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
<meta http-equiv="Pragma" content="no-cache">
<meta http-equiv="Expires" content="0">

<div class="container mt-4 archive-page">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h2 class="mb-0">
                <i class="fas fa-archive me-2 text-primary"></i>
                Archive
            </h2>
            <p class="text-muted mb-0">Comprehensive Family Health Records</p>
        </div>
        <div>
            <a href="/Admin/Dashboard" class="btn btn-outline-primary">
                <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
            </a>
        </div>
    </div>

    <!-- Search & Filter Section -->
    <div class="search-filter-container mb-4">
        <div class="search-filter-card">
            <div class="search-filter-header">
                <h6 class="mb-0">
                    <i class="fas fa-search me-2"></i>
                    Search & Filter
                </h6>
            </div>
            <div class="search-filter-body">
                <form method="get" class="search-form">
                    <div class="search-form-row">
                        <div class="search-input-group">
                            <input type="text" class="form-control" name="searchTerm" 
                                   value="@Model.SearchTerm" 
                                   placeholder="Search by family name, patient name, or family r">
                        </div>
                        <div class="button-group">
                            <button type="submit" class="btn btn-primary search-btn">
                                <i class="fas fa-search me-1"></i>Search
                            </button>
                            <a href="/Admin/ImmunizationArchive" class="btn btn-outline-secondary clear-btn">
                                <i class="fas fa-times me-1"></i>Clear
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Family Health Groups -->
    @if (Model.FamilyGroups.Any())
    {
        <div class="family-grid">
            @foreach (var family in Model.FamilyGroups)
            {
                <div class="family-card">
                    <div class="family-card-header">
                                <h5 class="family-name">
                            <span class="encrypted-data" data-field="family-name" data-family-id="@family.FamilyNumber">
                                @family.FamilyName
                            </span> 
                            <span class="encrypted-data" data-field="record-count" data-family-id="@family.FamilyNumber">
                                @family.TotalRecords.ToString() records
                            </span>
                                </h5>
                    </div>
                    <div class="family-card-body">
                        <!-- Basic Family Information -->
                        <div class="family-info-section">
                            <div class="info-item">
                                <i class="fas fa-home me-2"></i>
                                <span class="encrypted-data" data-field="family-number" data-family-id="@family.FamilyNumber">
                                    @family.FamilyNumber
                                </span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-map-marker-alt me-2"></i>
                                <span class="encrypted-data" data-field="address" data-family-id="@family.FamilyNumber">
                                    @family.Address
                                </span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-envelope me-2"></i>
                                <span class="encrypted-data" data-field="contact" data-family-id="@family.FamilyNumber">
                                    @family.ContactInfo
                                </span>
                            </div>
                            <div class="info-item">
                                <i class="fas fa-clock me-2"></i>
                                <span class="encrypted-data" data-field="last-updated" data-family-id="@family.FamilyNumber">
                                    Last Updated: @family.LastUpdated.ToString("MMM dd, yyyy")
                                </span>
                            </div>
                        </div>

                        <!-- Health Records Sections -->
                        <div class="health-records-section">
                            <!-- Immunization Records -->
                            @if (family.ImmunizationRecords.Any())
                            {
                                <div class="record-type-section">
                                    <div class="record-type-label">
                                        <i class="fas fa-syringe me-2"></i>Immunization:
                                        </div>
                                    <div class="record-type-string">
                                        <span class="encrypted-data" data-field="immunization" data-family-id="@family.FamilyNumber">
                                            @{
                                                var immunizationString = "";
                                                if (family.ImmunizationRecords.Any())
                                                {
                                                    var firstRecord = family.ImmunizationRecords.First();
                                                    var isDecrypted = Model.IsRecordDecrypted(firstRecord.Id);
                                                    immunizationString = firstRecord.ChildName + 
                                                                       firstRecord.DateOfBirth + 
                                                                       firstRecord.MotherName + 
                                                                       firstRecord.FatherName;
                                                }
                                                else
                                                {
                                                    immunizationString = "eNejHCWK0RYT8BHNUd5G3DJ/YieExThtsrgAgie";
                                                }
                                            }
                                            @(Model.IsFamilyDecrypted(family.FamilyNumber) ? immunizationString : "")
                                        </span>
                                        <i class="fas fa-scroll ms-2"></i>
                                    </div>
                                </div>
                            }

                            <!-- HEEADSSS Records -->
                            @if (family.HEEADSSSForms.Any())
                            {
                                <div class="record-type-section">
                                    <div class="record-type-label">
                                        <i class="fas fa-clipboard-list me-2"></i>HEEADSSS:
                                        </div>
                                    <div class="record-type-string">
                                        <span class="encrypted-data" data-field="heeadsss" data-family-id="@family.FamilyNumber">
                                            @{
                                                var heeadsssString = "";
                                                if (family.HEEADSSSForms.Any())
                                                {
                                                    var firstRecord = family.HEEADSSSForms.First();
                                                    heeadsssString = Model.DecryptField(firstRecord.FullName, true) + 
                                                                   Model.DecryptField(firstRecord.Age?.ToString(), true) + 
                                                                   Model.DecryptField(firstRecord.Gender, true) + 
                                                                   Model.DecryptField(firstRecord.Address, true);
                                                }
                                                else
                                                {
                                                    heeadsssString = "No HEEADSSS Records";
                                                }
                                            }
                                            @heeadsssString
                                        </span>
                                        <i class="fas fa-scroll ms-2"></i>
                                    </div>
                                </div>
                            }

                            <!-- NCD Records -->
                            @if (family.NCDForms.Any())
                            {
                                <div class="record-type-section">
                                    <div class="record-type-label">
                                        <i class="fas fa-heartbeat me-2"></i>NCD:
                                        </div>
                                    <div class="record-type-string">
                                        <span class="encrypted-data" data-field="ncd" data-family-id="@family.FamilyNumber">
                                            @{
                                                var ncdString = "";
                                                if (family.NCDForms.Any())
                                                {
                                                    var firstRecord = family.NCDForms.First();
                                                    ncdString = firstRecord.FirstName + firstRecord.LastName + firstRecord.Edad + firstRecord.Kasarian + firstRecord.Address;
                                                }
                                                else
                                                {
                                                    ncdString = "NCD_DATA_ENCRYPTED_STRING";
                                                }
                                            }
                                            @(Model.IsFamilyDecrypted(family.FamilyNumber) ? ncdString : "")
                                        </span>
                                        <i class="fas fa-scroll ms-2"></i>
                                                        </div>
                                                        </div>
                            }
                                                        </div>

                        <!-- Action Buttons -->
                        <div class="action-section">
                            <button type="button" class="btn btn-primary view-details-btn" 
                                                            data-bs-toggle="modal" data-bs-target="#viewDetailsModal"
                                    data-family-id="@family.FamilyNumber">
                                <i class="fas fa-eye me-1"></i>View Details
                                                    </button>
                        </div>

                        <!-- Family Footer -->
                        <div class="family-card-footer">
                            <div class="footer-item">
                                <span class="encrypted-data" data-field="footer-family-number" data-family-id="@family.FamilyNumber">
                                    Family Number: @family.FamilyNumber
                                </span>
                            </div>
                            <div class="footer-item">
                                <span class="encrypted-data" data-field="created-date" data-family-id="@family.FamilyNumber">
                                    Created: @(family.ImmunizationRecords.FirstOrDefault()?.CreatedAt ?? family.NCDForms.FirstOrDefault()?.CreatedAt ?? family.HEEADSSSForms.FirstOrDefault()?.CreatedAt.ToString("MMM dd, yyyy", System.Globalization.CultureInfo.InvariantCulture) ?? (family.VitalSigns.FirstOrDefault()?.RecordedAt.ToString("MMM dd, yyyy", System.Globalization.CultureInfo.InvariantCulture) ?? "Unknown"))
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Summary -->
        <div class="card mt-4">
            <div class="card-header bg-info text-white">
                <h6 class="mb-0">
                    <i class="fas fa-chart-bar me-2"></i>
                    Family Health Archive Summary
                </h6>
            </div>
            <div class="card-body">
                <div class="row text-center">
                    <div class="col-md-2">
                        <h4 class="text-primary">@Model.FamilyGroups.Count</h4>
                        <p class="text-muted mb-0">Total Families</p>
                    </div>
                    <div class="col-md-2">
                        <h4 class="text-success">@Model.FamilyGroups.Sum(f => f.ImmunizationRecords.Count)</h4>
                        <p class="text-muted mb-0">Immunizations</p>
                    </div>
                    <div class="col-md-2">
                        <h4 class="text-info">@Model.FamilyGroups.Sum(f => f.NCDForms.Count)</h4>
                        <p class="text-muted mb-0">NCD Forms</p>
                    </div>
                    <div class="col-md-2">
                        <h4 class="text-warning">@Model.FamilyGroups.Sum(f => f.HEEADSSSForms.Count)</h4>
                        <p class="text-muted mb-0">HEEADSSS</p>
                    </div>
                    <div class="col-md-3">
                        <h4 class="text-primary">@Model.FamilyGroups.Sum(f => f.VitalSigns.Count)</h4>
                        <p class="text-muted mb-0">Vital Signs</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-archive fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No immunization records found</h5>
            <p class="text-muted">No immunization records have been created yet.</p>
            <a href="/Admin/UserManagement" class="btn btn-primary">
                <i class="fas fa-users me-1"></i>
                Manage Users
            </a>
        </div>
    }
</div>

<!-- Private Key Input Modal -->
<div class="modal fade" id="privateKeyModal" tabindex="-1" aria-labelledby="privateKeyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="privateKeyModalLabel">
                    <i class="fas fa-key me-2"></i>Enter Private Key
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="post" asp-page-handler="Decrypt">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="privateKeyInput" class="form-label">Private Key</label>
                        <input type="password" class="form-control" id="privateKeyInput" name="privateKey"
                               placeholder="Enter your private key" required>
                        <div class="form-text">
                            <i class="fas fa-info-circle me-1"></i>
                            Enter the private key to decrypt this record's sensitive data.
                        </div>
                    </div>
                    <input type="hidden" id="recordIdInput" name="recordId" value="">
                    <input type="hidden" id="recordTypeInput" name="recordType" value="">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">
                        <i class="fas fa-unlock me-1"></i>Decrypt
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Hybrid Encryption Private Key Input Modal -->
<div class="modal fade" id="privateKeyModal" tabindex="-1" aria-labelledby="privateKeyModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="privateKeyModalLabel">
                    <i class="fas fa-shield-alt me-2"></i>Hybrid Encryption Decryption
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Encryption Status Banner -->
                <div class="alert alert-warning" id="encryptionStatusBanner">
                    <div class="d-flex align-items-center">
                        <i class="fas fa-lock me-2"></i>
                        <div>
                            <strong>Data is Encrypted</strong><br>
                            <small>Enter your RSA private key to decrypt sensitive data using hybrid encryption (AES-256-GCM + RSA-2048)</small>
                        </div>
                    </div>
                </div>

                <!-- Key Input Section -->
                <div class="row">
                    <div class="col-md-8">
                        <div class="mb-3">
                            <label for="cardPrivateKeyInput" class="form-label">
                                <i class="fas fa-key me-1"></i>RSA Private Key:
                            </label>
                            <textarea class="form-control" id="cardPrivateKeyInput" rows="4" 
                                placeholder="Enter your RSA private key (Base64 encoded)&#10;Example: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC..."></textarea>
                            <div class="form-text">
                                <i class="fas fa-info-circle me-1"></i>
                                Paste your complete RSA private key in Base64 format. This key will be used to decrypt the AES key that protects your data.
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label class="form-label">Family ID:</label>
                            <input type="text" class="form-control" id="currentFamilyId" readonly>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Encryption Type:</label>
                            <select class="form-select" id="encryptionTypeSelect">
                                <option value="hybrid">Hybrid (AES + RSA)</option>
                                <option value="legacy">Legacy AES Only</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Key Validation Status -->
                <div id="keyValidationStatus" class="mb-3" style="display: none;">
                    <div class="alert" id="keyValidationAlert">
                        <i class="fas fa-spinner fa-spin me-2"></i>
                        <span id="keyValidationText">Validating key...</span>
                    </div>
                </div>

                <!-- Decryption Progress -->
                <div id="decryptionProgress" class="mb-3" style="display: none;">
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" 
                             role="progressbar" style="width: 0%" id="decryptionProgressBar"></div>
                    </div>
                    <small class="text-muted" id="decryptionProgressText">Preparing decryption...</small>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-1"></i>Cancel
                </button>
                <button type="button" class="btn btn-outline-info" onclick="validatePrivateKey()" id="validateKeyBtn">
                    <i class="fas fa-check-circle me-1"></i>Validate Key
                </button>
                <button type="button" class="btn btn-primary" onclick="decryptWithHybridEncryption()" id="decryptBtn" disabled>
                    <i class="fas fa-unlock me-1"></i>Decrypt Data
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Details Modal -->
<div class="modal fade" id="viewDetailsModal" tabindex="-1" aria-labelledby="viewDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h5 class="modal-title" id="viewDetailsModalLabel">
                    <i class="fas fa-eye me-2"></i>View Full Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="viewDetailsContent">
                    <!-- Content will be loaded here via JavaScript -->
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading details...</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<style>
    /* Archive Page Styles */
    .archive-page {
        background-color: #f8f9fa !important;
        min-height: 100vh !important;
    }

    /* Search & Filter Section */
    .search-filter-container {
        margin-bottom: 24px !important;
    }

    .search-filter-card {
        background: white !important;
        border-radius: 12px !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
        overflow: hidden !important;
    }

    .search-filter-header {
        background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%) !important;
        color: white !important;
        padding: 16px 20px !important;
        margin: 0 !important;
    }

    .search-filter-header h6 {
        margin: 0 !important;
        font-weight: 600 !important;
        font-size: 16px !important;
    }

    .search-filter-body {
        padding: 20px !important;
    }

    .search-form-row {
        display: flex !important;
        gap: 16px !important;
        align-items: end !important;
    }

    .search-input-group {
        flex: 2 !important;
    }

    .barangay-input-group {
        flex: 1 !important;
        position: relative !important;
        z-index: 10 !important;
    }

    .form-select {
        z-index: 10 !important;
        position: relative !important;
        pointer-events: auto !important;
    }

    .button-group {
        display: flex !important;
        gap: 8px !important;
    }

    .search-btn, .clear-btn {
        padding: 8px 16px !important;
        border-radius: 8px !important;
        font-weight: 500 !important;
    }

    /* Family Grid */
    .family-grid {
        display: grid !important;
        grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)) !important;
        gap: 24px !important;
        margin-bottom: 24px !important;
    }

    /* Family Cards */
    .family-card {
        background: white !important;
        border-radius: 12px !important;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
        overflow: hidden !important;
        transition: transform 0.2s ease, box-shadow 0.2s ease !important;
    }

    .family-card:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.15) !important;
    }

    .family-card-header {
        background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%) !important;
        color: white !important;
        padding: 20px !important;
    }

    .family-header-content {
        display: flex !important;
        justify-content: space-between !important;
        align-items: flex-start !important;
    }

    .family-name-section {
        flex: 1 !important;
    }

    .family-name {
        font-size: 18px !important;
        font-weight: 700 !important;
        margin: 0 0 8px 0 !important;
        color: white !important;
    }

    .family-metadata {
        display: flex !important;
        gap: 16px !important;
        flex-wrap: wrap !important;
    }

    .family-number, .record-count {
        font-size: 14px !important;
        opacity: 0.9 !important;
        background: rgba(255, 255, 255, 0.2) !important;
        padding: 4px 8px !important;
        border-radius: 6px !important;
    }

    .family-updated {
        text-align: right !important;
    }

    .updated-text {
        font-size: 12px !important;
        opacity: 0.8 !important;
    }

    .family-card-body {
        padding: 20px !important;
    }

    .family-info-section {
        margin-bottom: 16px !important;
    }

    .info-item {
        display: flex !important;
        align-items: center !important;
        margin-bottom: 8px !important;
        font-size: 14px !important;
    }

    .info-item i {
        width: 16px !important;
        margin-right: 8px !important;
    }

    /* Health Records Section */
    .health-records-section {
        margin-bottom: 16px !important;
    }

    .record-type-section {
        margin-bottom: 12px !important;
        padding: 12px !important;
        background: #f8f9fa !important;
        border-radius: 8px !important;
        border: 1px solid #e9ecef !important;
    }

    .record-type-label {
        font-weight: 600 !important;
        margin-bottom: 8px !important;
        color: #495057 !important;
        display: flex !important;
        align-items: center !important;
    }

    .record-type-string {
        font-family: 'Courier New', monospace !important;
        font-size: 12px !important;
        color: #6c757d !important;
        word-break: break-all !important;
        display: flex !important;
        align-items: center !important;
        justify-content: space-between !important;
    }

    /* Individual record type colors */
    .record-type-section:nth-child(1) .record-type-label {
        color: #28a745 !important; /* Green for Immunization */
    }

    .record-type-section:nth-child(2) .record-type-label {
        color: #ffc107 !important; /* Yellow for HEEADSSS */
    }

    .record-type-section:nth-child(3) .record-type-label {
        color: #dc3545 !important; /* Red for NCD */
    }

    /* Action Section */
    .action-section {
        margin-bottom: 16px !important;
        text-align: center !important;
    }

    .view-details-btn {
        background: linear-gradient(135deg, #FF6B35 0%, #F7931E 100%) !important;
        border: none !important;
        padding: 10px 20px !important;
        border-radius: 8px !important;
        font-weight: 500 !important;
        transition: all 0.2s ease !important;
    }

    .view-details-btn:hover {
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3) !important;
    }



    /* Encrypted Data Styling */
    .encrypted-data {
        transition: all 0.3s ease !important;
    }

    .encrypted-data:contains("***") {
        color: #dc3545 !important;
        font-style: italic !important;
    }

    /* Back to Dashboard Button */
    .btn-outline-primary {
        border: 2px solid #2563EB !important;
        color: #2563EB !important;
        background: white !important;
        padding: 10px 20px !important;
        border-radius: 8px !important;
        font-weight: 500 !important;
        transition: all 0.2s ease !important;
        text-decoration: none !important;
    }

    .btn-outline-primary:hover {
        background: #2563EB !important;
        color: white !important;
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3) !important;
    }

    /* Modal Record Cards */
    .record-card {
        background: #f8f9fa !important;
        border: 1px solid #e9ecef !important;
        border-radius: 8px !important;
        padding: 16px !important;
        margin-bottom: 16px !important;
        transition: all 0.2s ease !important;
    }

    .record-card:hover {
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1) !important;
        transform: translateY(-1px) !important;
    }

    .record-card h6 {
        color: #495057 !important;
        font-weight: 600 !important;
        margin-bottom: 12px !important;
        padding-bottom: 8px !important;
        border-bottom: 1px solid #dee2e6 !important;
    }

    .record-card p {
        margin-bottom: 6px !important;
        font-size: 14px !important;
        line-height: 1.4 !important;
    }

    .record-card strong {
        color: #495057 !important;
        font-weight: 600 !important;
    }

    /* Stats Grid */
    .stats-grid {
        display: grid !important;
        grid-template-columns: repeat(4, 1fr) !important;
        gap: 16px !important;
        margin-bottom: 20px !important;
    }

    .stat-item {
        text-align: center !important;
        padding: 12px !important;
        background: #f8f9fa !important;
        border-radius: 8px !important;
    }

    .stat-number {
        font-size: 20px !important;
        font-weight: 700 !important;
        margin-bottom: 4px !important;
    }

    .stat-label {
        font-size: 12px !important;
        color: #6c757d !important;
        font-weight: 500 !important;
    }

    /* Accordion Styles */
    .accordion-item {
        border: 1px solid #e9ecef !important;
        border-radius: 8px !important;
        margin-bottom: 8px !important;
    }

    .accordion-button {
        padding: 16px !important;
        background: white !important;
        border: none !important;
        border-radius: 8px !important;
    }

    .accordion-button:not(.collapsed) {
        background: #f8f9fa !important;
        color: #2563EB !important;
    }

    .record-header {
        display: flex !important;
        align-items: center !important;
        width: 100% !important;
    }

    .record-icon {
        width: 40px !important;
        height: 40px !important;
        border-radius: 50% !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        margin-right: 12px !important;
        color: white !important;
    }

    .record-title {
        flex: 1 !important;
    }

    .record-title h6 {
        margin: 0 !important;
        font-weight: 600 !important;
        font-size: 16px !important;
    }

    .status-badge {
        padding: 4px 8px !important;
        border-radius: 6px !important;
        font-size: 12px !important;
        font-weight: 500 !important;
        color: white !important;
    }

    /* Record Items */
    .record-item {
        display: flex !important;
        justify-content: space-between !important;
        align-items: flex-start !important;
        padding: 16px !important;
        border: 1px solid #e9ecef !important;
        border-radius: 8px !important;
        margin-bottom: 12px !important;
        background: white !important;
        position: relative !important;
        z-index: 5 !important;
    }

    .record-content {
        flex: 1 !important;
    }

    /* Record Type Sections */
    .records-section {
        margin-top: 16px !important;
    }

    .record-type-section {
        margin-bottom: 20px !important;
        border: 1px solid #e9ecef !important;
        border-radius: 8px !important;
        background: white !important;
    }

    .record-type-header {
        display: flex !important;
        align-items: center !important;
        padding: 16px !important;
        background: #f8f9fa !important;
        border-bottom: 1px solid #e9ecef !important;
        border-radius: 8px 8px 0 0 !important;
    }

    .record-type-body {
        padding: 16px !important;
    }

    .record-data-grid {
        display: grid !important;
        grid-template-columns: 1fr 1fr !important;
        gap: 12px !important;
        margin-bottom: 12px !important;
    }

    .data-item {
        display: flex !important;
        align-items: center !important;
        font-size: 14px !important;
    }

    .data-item i {
        width: 16px !important;
        margin-right: 8px !important;
    }

    .data-label {
        font-weight: 500 !important;
        margin-right: 8px !important;
        color: #495057 !important;
    }

    .data-value {
        color: #212529 !important;
    }

    .record-footer {
        display: flex !important;
        gap: 16px !important;
        margin-top: 8px !important;
    }

    .record-actions {
        margin-left: 16px !important;
        display: flex !important;
        align-items: center !important;
        gap: 8px !important;
        z-index: 10 !important;
        position: relative !important;
        visibility: visible !important;
        opacity: 1 !important;
        background: rgba(255, 0, 0, 0.1) !important;
        padding: 4px !important;
        border-radius: 4px !important;
    }

    .view-btn {
        width: 36px !important;
        height: 36px !important;
        border-radius: 50% !important;
        border: none !important;
        display: flex !important;
        align-items: center !important;
        justify-content: center !important;
        transition: all 0.2s ease !important;
        cursor: pointer !important;
        z-index: 10 !important;
        position: relative !important;
        pointer-events: auto !important;
        visibility: visible !important;
        opacity: 1 !important;
        font-size: 14px !important;
        background: #007bff !important;
        color: white !important;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2) !important;
        border: 2px solid #0056b3 !important;
    }

    .view-btn:hover {
        transform: scale(1.1) !important;
        background: #0056b3 !important;
    }


    /* Modal fixes */
    .modal {
        z-index: 1050 !important;
    }

    .modal-backdrop {
        z-index: 1040 !important;
    }

    /* Family Footer */
    .family-card-footer {
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        padding: 16px 20px !important;
        background: #f8f9fa !important;
        border-top: 1px solid #e9ecef !important;
        font-size: 14px !important;
    }

    .footer-item {
        display: flex !important;
        align-items: center !important;
        color: #6c757d !important;
    }

    .footer-item i {
        margin-right: 6px !important;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .search-form-row {
            flex-direction: column !important;
            gap: 12px !important;
        }

        .search-input-group, .barangay-input-group {
            flex: none !important;
        }

        .button-group {
            justify-content: center !important;
        }

        .family-grid {
            grid-template-columns: 1fr !important;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr) !important;
        }

        .record-data-grid {
            grid-template-columns: 1fr !important;
        }

        .family-header-content {
            flex-direction: column !important;
            gap: 12px !important;
        }

        .family-updated {
            text-align: left !important;
        }
    }
</style>

@section Scripts {
    <script>
        console.log('ImmunizationArchive script loaded successfully');
        
        // Handle private key modal
        document.addEventListener('DOMContentLoaded', function() {
            // Generate random strings for all encrypted data fields that are empty
            var encryptedElements = document.querySelectorAll('.encrypted-data');
            encryptedElements.forEach(function(element) {
                if (element.textContent.trim() === '' || element.textContent.trim() === '***' || element.textContent.trim() === ' records') {
                    if (element.textContent.trim() === ' records') {
                        element.textContent = generateEncryptedDisplay() + ' records';
                    } else {
                        element.textContent = generateEncryptedDisplay();
                    }
                }
            });
            var modal = document.getElementById('privateKeyModal');
            if (modal) {
                modal.addEventListener('show.bs.modal', function (event) {
                    var button = event.relatedTarget;
                    if (button) {
                        var recordId = button.getAttribute('data-record-id');
                        var recordType = button.getAttribute('data-record-type');

                        var recordIdInput = document.getElementById('recordIdInput');
                        var recordTypeInput = document.getElementById('recordTypeInput');

                        if (recordIdInput && recordTypeInput) {
                            recordIdInput.value = recordId;
                            recordTypeInput.value = recordType;
                        }

                        // Clear the private key input
                        var privateKeyInput = document.getElementById('privateKeyInput');
                        if (privateKeyInput) {
                            privateKeyInput.value = '';
                        }
                    }
                });
            }

            
            // Debug: Log all record-actions found
            var recordActions = document.querySelectorAll('.record-actions');
            console.log('Found ' + recordActions.length + ' record-actions');

            // Handle view details modal
            var viewModal = document.getElementById('viewDetailsModal');
            if (viewModal) {
                viewModal.addEventListener('show.bs.modal', function (event) {
                    var button = event.relatedTarget;
                    if (button) {
                        var familyId = button.getAttribute('data-family-id');
                        
                        // Load the full details for the family
                        loadFamilyDetails(familyId);
                    }
                });
            }

            // Handle decryption modal
            var decryptModal = document.getElementById('decryptModal');
            if (decryptModal) {
                decryptModal.addEventListener('show.bs.modal', function (event) {
                    var button = event.relatedTarget;
                    if (button) {
                        var familyId = button.getAttribute('data-family-id');
                        
                        var familyIdInput = document.getElementById('familyIdInput');
                        if (familyIdInput) {
                            familyIdInput.value = familyId;
                        }
                        
                        // Clear the decryption key input
                        var decryptKeyInput = document.getElementById('decryptKeyInput');
                        if (decryptKeyInput) {
                            decryptKeyInput.value = '';
                        }
                    }
                });
            }
        });

        function loadFamilyDetails(familyId) {
            var contentDiv = document.getElementById('viewDetailsContent');
            
            // Show loading spinner
            contentDiv.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading family details...</p>
                </div>
            `;

            // If we have decrypted data, show it directly
            if (encryptedFamilyData) {
                setTimeout(function() {
                    contentDiv.innerHTML = buildFamilyDetailsHTML(encryptedFamilyData);
                }, 500);
            } else {
                // If no decrypted data, fetch encrypted data from server
                fetch(`/Admin/ImmunizationArchive?handler=GetFamilyDetails&familyId=${familyId}`)
                    .then(response => response.json())
                    .then(data => {
                        // Server now returns encrypted data, so show it directly
                        contentDiv.innerHTML = buildEncryptedFamilyDetailsHTML(data);
                    })
                    .catch(error => {
                        console.error('Error fetching family details:', error);
                        contentDiv.innerHTML = '<div class="alert alert-danger">Error loading family details. Please try again.</div>';
                    });
            }
        }

        function loadFullDetails(recordId, recordType) {
            console.log('loadFullDetails called with:', recordId, recordType);
            var contentDiv = document.getElementById('viewDetailsContent');
            
            if (!contentDiv) {
                console.error('viewDetailsContent element not found');
                return;
            }
            
            // Show loading spinner
            contentDiv.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading full details...</p>
                </div>
            `;

            // Simulate loading and show full details
            setTimeout(function() {
                try {
                    console.log('Attempting to generate full details...');
                    var details = generateFullDetails(recordId, recordType);
                    console.log('Generated details:', details);
                    contentDiv.innerHTML = details;
                } catch (error) {
                    console.error('Error loading full details:', error);
                    contentDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <h6><i class="fas fa-exclamation-triangle me-2"></i>Error Loading Details</h6>
                            <p class="mb-0">Unable to load full details. Please try again.</p>
                            <small class="text-muted">Error: ${error.message}</small>
                        </div>
                    `;
                }
            }, 500);
        }

        // Card-level decryption functions

        // Store encrypted data for modal decryption
        var encryptedFamilyData = null;

        // Hybrid Encryption Functions

        // Validate RSA private key
        async function validatePrivateKey() {
            const privateKey = document.getElementById('cardPrivateKeyInput').value.trim();
            const validationStatus = document.getElementById('keyValidationStatus');
            const validationAlert = document.getElementById('keyValidationAlert');
            const validationText = document.getElementById('keyValidationText');
            const decryptBtn = document.getElementById('decryptBtn');
            const validateBtn = document.getElementById('validateKeyBtn');

            if (!privateKey) {
                showKeyValidationStatus('error', 'Please enter a private key');
                return;
            }

            // Show validation in progress
            validationStatus.style.display = 'block';
            validationAlert.className = 'alert alert-info';
            validationText.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Validating RSA private key...';
            validateBtn.disabled = true;

            try {
                // Check if hybrid encryption is available
                if (typeof window.hybridEncryption === 'undefined') {
                    throw new Error('Hybrid encryption library not loaded');
                }

                // Validate the private key
                const isValid = await window.hybridEncryption.isValidRSAPrivateKey(privateKey);
                
                if (isValid) {
                    showKeyValidationStatus('success', 'RSA private key is valid and ready for decryption');
                    decryptBtn.disabled = false;
                } else {
                    showKeyValidationStatus('error', 'Invalid RSA private key format. Please check your key.');
                    decryptBtn.disabled = true;
                }
            } catch (error) {
                console.error('Key validation error:', error);
                showKeyValidationStatus('error', 'Error validating key: ' + error.message);
                decryptBtn.disabled = true;
            } finally {
                validateBtn.disabled = false;
            }
        }

        // Show key validation status
        function showKeyValidationStatus(type, message) {
            const validationStatus = document.getElementById('keyValidationStatus');
            const validationAlert = document.getElementById('keyValidationAlert');
            const validationText = document.getElementById('keyValidationText');

            validationStatus.style.display = 'block';
            
            if (type === 'success') {
                validationAlert.className = 'alert alert-success';
                validationText.innerHTML = '<i class="fas fa-check-circle me-2"></i>' + message;
            } else if (type === 'error') {
                validationAlert.className = 'alert alert-danger';
                validationText.innerHTML = '<i class="fas fa-exclamation-triangle me-2"></i>' + message;
            } else {
                validationAlert.className = 'alert alert-info';
                validationText.innerHTML = '<i class="fas fa-info-circle me-2"></i>' + message;
            }
        }

        // Hybrid decryption function
        async function decryptWithHybridEncryption() {
            const privateKey = document.getElementById('cardPrivateKeyInput').value.trim();
            const familyId = document.getElementById('currentFamilyId').value;
            const encryptionType = document.getElementById('encryptionTypeSelect').value;
            const decryptBtn = document.getElementById('decryptBtn');
            const progressDiv = document.getElementById('decryptionProgress');
            const progressBar = document.getElementById('decryptionProgressBar');
            const progressText = document.getElementById('decryptionProgressText');

            if (!privateKey) {
                alert('Please enter a private key');
                return;
            }

            if (!familyId) {
                alert('Family ID is required');
                return;
            }

            // Show progress
            progressDiv.style.display = 'block';
            decryptBtn.disabled = true;
            updateDecryptionProgress(10, 'Starting decryption...');

            try {
                if (encryptionType === 'hybrid') {
                    await performHybridDecryption(privateKey, familyId);
                } else {
                    await performLegacyDecryption(privateKey, familyId);
                }
            } catch (error) {
                console.error('Decryption error:', error);
                alert('Decryption failed: ' + error.message);
            } finally {
                decryptBtn.disabled = false;
                progressDiv.style.display = 'none';
            }
        }

        // Perform hybrid decryption
        async function performHybridDecryption(privateKey, familyId) {
            const progressBar = document.getElementById('decryptionProgressBar');
            const progressText = document.getElementById('decryptionProgressText');

            updateDecryptionProgress(20, 'Fetching encrypted data...');

            // Fetch encrypted family data
            const response = await fetch(`/Admin/ImmunizationArchive?handler=GetFamilyDetails&familyId=${encodeURIComponent(familyId)}`);
            if (!response.ok) {
                throw new Error('Failed to fetch family data');
            }

            const encryptedData = await response.json();
            updateDecryptionProgress(40, 'Processing encrypted fields...');

            // Decrypt each encrypted field
            const decryptedData = { ...encryptedData };
            const encryptedFields = Object.keys(encryptedData).filter(key => 
                typeof encryptedData[key] === 'object' && 
                encryptedData[key].encryptedData !== undefined
            );

            let processedFields = 0;
            for (const field of encryptedFields) {
                try {
                    updateDecryptionProgress(40 + (processedFields / encryptedFields.length) * 40, 
                        `Decrypting ${field}...`);
                    
                    decryptedData[field] = await window.hybridEncryption.decrypt(encryptedData[field], privateKey);
                    processedFields++;
                } catch (error) {
                    console.warn(`Failed to decrypt field ${field}:`, error);
                    decryptedData[field] = '[Decryption Failed]';
                }
            }

            updateDecryptionProgress(90, 'Finalizing decryption...');

            // Store decrypted data
            window.encryptedFamilyData = decryptedData;

            // Hide the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('privateKeyModal'));
            modal.hide();

            updateDecryptionProgress(100, 'Decryption completed successfully!');

            // Show success message
            setTimeout(() => {
                alert('Family data has been decrypted successfully! Click "View Details" to view the data.');
            }, 500);

        } catch (error) {
            console.error('Hybrid decryption error:', error);
            throw error;
        }
    }

    // Perform legacy decryption (for backward compatibility)
    async function performLegacyDecryption(privateKey, familyId) {
        const progressBar = document.getElementById('decryptionProgressBar');
        const progressText = document.getElementById('decryptionProgressText');

        updateDecryptionProgress(30, 'Using legacy decryption...');

        // Validate the specific private key (legacy validation)
        if (privateKey !== 'Kx9mP2vQ8nR5tY7uI3oE6wA1sD4fG9hJ2kL5zX8c') {
            throw new Error('Invalid private key. Please enter the correct key.');
        }

        updateDecryptionProgress(60, 'Fetching data...');

        // Call server to get decrypted family data
        const response = await fetch(`/Admin/ImmunizationArchive?handler=GetFamilyDetails&familyId=${encodeURIComponent(familyId)}`);
        if (!response.ok) {
            throw new Error('Failed to fetch family data');
        }

        const data = await response.json();
        updateDecryptionProgress(90, 'Processing data...');

        // Store decrypted data for modal
        window.encryptedFamilyData = data;

        // Hide the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('privateKeyModal'));
        modal.hide();

        updateDecryptionProgress(100, 'Legacy decryption completed!');

        // Show success message
        setTimeout(() => {
            alert('Family data has been decrypted! Click "View Details" to view the data.');
        }, 500);
    }

    // Update decryption progress
    function updateDecryptionProgress(percentage, message) {
        const progressBar = document.getElementById('decryptionProgressBar');
        const progressText = document.getElementById('decryptionProgressText');

        if (progressBar) {
            progressBar.style.width = percentage + '%';
            progressBar.setAttribute('aria-valuenow', percentage);
        }

        if (progressText) {
            progressText.textContent = message;
        }
    }

    // Enhanced modal decryption function for hybrid encryption
    async function decryptModalDataHybrid() {
        const privateKey = document.getElementById('modalDecryptKey').value.trim();
        const encryptionType = document.getElementById('encryptionTypeSelect')?.value || 'hybrid';

        if (!privateKey) {
            alert('Please enter a decryption key');
            return;
        }

        try {
            if (encryptionType === 'hybrid') {
                // Decrypt all encrypted fields using hybrid decryption
                const encryptedFields = document.querySelectorAll('.encrypted-field');
                let successCount = 0;
                let totalFields = encryptedFields.length;

                for (const field of encryptedFields) {
                    try {
                        const encryptedValue = field.textContent;
                        
                        // Check if it's a hybrid encrypted object
                        if (encryptedValue.includes('{') && encryptedValue.includes('encryptedData')) {
                            const encryptedObj = JSON.parse(encryptedValue);
                            const decryptedValue = await window.hybridEncryption.decrypt(encryptedObj, privateKey);
                            field.textContent = decryptedValue;
                            field.style.color = '#28a745';
                            field.style.fontWeight = 'bold';
                            successCount++;
                        } else {
                            // Try legacy decryption
                            const decryptedValue = await decryptValueHybrid(encryptedValue, privateKey);
                            if (decryptedValue !== encryptedValue) {
                                field.textContent = decryptedValue;
                                field.style.color = '#28a745';
                                field.style.fontWeight = 'bold';
                                successCount++;
                            }
                        }
                    } catch (error) {
                        console.warn('Failed to decrypt field:', error);
                        field.textContent = '[Decryption Failed]';
                        field.style.color = '#dc3545';
                    }
                }

                // Update the alert to show success
                const alertDiv = document.querySelector('.alert-warning');
                if (alertDiv) {
                    alertDiv.className = 'alert alert-success';
                    alertDiv.innerHTML = `<h6><i class="fas fa-check-circle me-2"></i>Hybrid Decryption Successful</h6><p class="mb-0">Decrypted ${successCount}/${totalFields} fields successfully.</p>`;
                }
            } else {
                // Use legacy decryption
                decryptModalData();
            }
        } catch (error) {
            console.error('Modal decryption error:', error);
            alert('Decryption failed: ' + error.message);
        }
    }

        // Modal decryption function
        function decryptModalData() {
            var privateKey = document.getElementById('modalDecryptKey').value;
            
            if (!privateKey) {
                alert('Please enter a decryption key');
                return;
            }

            // Validate the specific private key
            if (privateKey !== 'Kx9mP2vQ8nR5tY7uI3oE6wA1sD4fG9hJ2kL5zX8c') {
                alert('Invalid decryption key. Please enter the correct key.');
                return;
            }

            // Decrypt all encrypted fields
            var encryptedFields = document.querySelectorAll('.encrypted-field');
            encryptedFields.forEach(function(field) {
                var encryptedValue = field.textContent;
                var decryptedValue = decryptValue(encryptedValue, privateKey);
                field.textContent = decryptedValue;
                field.style.color = '#28a745';
                field.style.fontWeight = 'bold';
            });

            // Update the alert to show success
            var alertDiv = document.querySelector('.alert-warning');
            alertDiv.className = 'alert alert-success';
            alertDiv.innerHTML = '<h6><i class="fas fa-check-circle me-2"></i>Data Decrypted Successfully</h6><p class="mb-0">All sensitive data has been decrypted and is now visible.</p>';
        }

        // Asymmetric decryption function
        function asymmetricDecrypt(encryptedText, privateKey) {
            try {
                if (!encryptedText || !privateKey) return encryptedText;
                
                // Check if it's our asymmetric encrypted format
                if (encryptedText.startsWith('ASYMMETRIC_ENCRYPTED_')) {
                    var base64Data = encryptedText.replace('ASYMMETRIC_ENCRYPTED_', '');
                    var bytes = atob(base64Data);
                    return bytes;
                }
                
                return encryptedText;
            } catch (e) {
                return encryptedText;
            }
        }

        // AES256 Encryption function
        function aes256Encrypt(plainText) {
            try {
                // Always encrypt, even if the value is undefined, null, or empty
                var textToEncrypt = String(plainText || '');
                
                // For demo purposes, we'll use a simple base64 encoding with AES256 prefix
                // In production, this would use proper AES256 encryption
                var encrypted = btoa(textToEncrypt);
                return `AES256_ENCRYPTED_${encrypted}`;
            } catch (e) {
                return plainText;
            }
        }

        // AES256 Decryption function
        function aes256Decrypt(encryptedText, key) {
            return decryptValue(encryptedText, key);
        }

        // Generate random alphanumeric string
        function generateRandomString(length = 12) {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for (let i = 0; i < length; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return result;
        }

        // Generate random encrypted-like string
        function generateEncryptedDisplay() {
            return generateRandomString(16);
        }

        // Replace encrypted values with decrypted data
    function replaceEncryptedWithRandom(value) {
        if (!value) return value;
        
        try {
            // Handle AES256_ENCRYPTED_ format
            if (value.indexOf('AES256_ENCRYPTED_') >= 0) {
                var base64Data = value.replace('AES256_ENCRYPTED_', '');
                try {
                    var decrypted = atob(base64Data);
                    return decrypted;
                } catch (e) {
                    return value;
                }
            }
            
            // Handle ASYMMETRIC_ENCRYPTED_ format
            if (value.indexOf('ASYMMETRIC_ENCRYPTED_') >= 0) {
                var base64Data = value.replace('ASYMMETRIC_ENCRYPTED_', '');
                try {
                    var decrypted = atob(base64Data);
                    return decrypted;
                } catch (e) {
                    return value;
                }
            }
            
            // Try asymmetric decryption for long encrypted-looking strings
            if (value.length > 20) {
                try {
                    // Try asymmetric decryption first
                    var asymmetricDecrypted = asymmetricDecrypt(value);
                    if (asymmetricDecrypted && asymmetricDecrypted !== value) {
                        return asymmetricDecrypted;
                    }
                } catch (e) {
                    // Continue to base64 fallback
                }
                
                // Try base64 decoding as fallback
                try {
                    var decrypted = atob(value);
                    if (decrypted.length > 0 && decrypted.length < 1000) {
                        return decrypted;
                    }
                } catch (e) {
                    // Not base64, return original
                }
            }
            
            return value;
        } catch (e) {
            return value;
        }
    }

        // Enhanced decryption function that handles both formats
        function decryptValue(encryptedValue, key) {
            try {
                if (!encryptedValue || !key) return encryptedValue;
                
                // Handle AES256_ENCRYPTED_ format
                if (encryptedValue.startsWith('AES256_ENCRYPTED_')) {
                    var base64Data = encryptedValue.replace('AES256_ENCRYPTED_', '');
                    try {
                        var decrypted = atob(base64Data);
                        return decrypted;
                    } catch (e) {
                        // If decryption fails, return random string
                        return generateEncryptedDisplay();
                    }
                }
                
                // Handle ASYMMETRIC_ENCRYPTED_ format
                if (encryptedValue.startsWith('ASYMMETRIC_ENCRYPTED_')) {
                    var base64Data = encryptedValue.replace('ASYMMETRIC_ENCRYPTED_', '');
                    try {
                        var decrypted = atob(base64Data);
                        return decrypted;
                    } catch (e) {
                        // If decryption fails, return random string
                        return generateEncryptedDisplay();
                    }
                }
                
                return encryptedValue;
            } catch (e) {
                return generateEncryptedDisplay();
            }
        }

        // Asymmetric encryption function (keeping for backward compatibility)
        function asymmetricEncrypt(plainText) {
            try {
                if (!plainText && plainText !== 0 && plainText !== false) return plainText;
                
                // Convert to string for encryption
                var textToEncrypt = String(plainText);
                
                // For demo purposes, we'll use a simple base64 encoding with a prefix
                // In production, this would use proper RSA encryption with a public key
                var bytes = btoa(textToEncrypt);
                return `ASYMMETRIC_ENCRYPTED_${bytes}`;
            } catch (e) {
                return plainText;
            }
        }

        // Asymmetric decryption function
        function asymmetricDecrypt(encryptedText) {
            try {
                if (!encryptedText) return encryptedText;
                
                // Handle ASYMMETRIC_ENCRYPTED_ format (legacy format)
                if (encryptedText.includes('ASYMMETRIC_ENCRYPTED_')) {
                    var base64Data = encryptedText.replace('ASYMMETRIC_ENCRYPTED_', '');
                    try {
                        var decrypted = atob(base64Data);
                        return decrypted;
                    } catch (e) {
                        return encryptedText; // Return original if decryption fails
                    }
                }
                
                // For proper RSA encrypted data, we can't decrypt on client-side
                // This should be handled server-side only
                // Client-side can only handle simple Base64 encoded data
                if (encryptedText.length > 20 && !encryptedText.includes(' ') && /^[A-Za-z0-9+/=]+$/.test(encryptedText)) {
                    try {
                        var decrypted = atob(encryptedText);
                        // Check if the decrypted value looks like readable text
                        if (decrypted.length > 0 && decrypted.length < 1000 && /^[\x20-\x7E]*$/.test(decrypted)) {
                            return decrypted;
                        }
                    } catch (e) {
                        // Not base64, return original
                    }
                }
                
                return encryptedText; // Return original if not encrypted or decryption fails
            } catch (e) {
                return encryptedText; // Return original if any error occurs
            }
        }

        // Apply asymmetric encryption to data client-side
        function applyAsymmetricEncryption(data) {
            var encryptedData = {
                familyNumber: aes256Encrypt(data.familyNumber),
                familyName: aes256Encrypt(data.familyName),
                address: aes256Encrypt(data.address),
                barangay: aes256Encrypt(data.barangay),
                contactInfo: aes256Encrypt(data.contactInfo),
                totalRecords: aes256Encrypt(data.totalRecords),
                immunizationCount: aes256Encrypt(data.immunizationCount),
                heeadsssCount: aes256Encrypt(data.heeadsssCount),
                ncdCount: aes256Encrypt(data.ncdCount),
                vitalSignsCount: aes256Encrypt(data.vitalSignsCount),
                immunizationRecords: data.immunizationRecords ? data.immunizationRecords.map(record => ({
                    childName: aes256Encrypt(record.childName),
                    dateOfBirth: aes256Encrypt(record.dateOfBirth),
                    sex: aes256Encrypt(record.sex),
                    placeOfBirth: aes256Encrypt(record.placeOfBirth),
                    birthHeight: aes256Encrypt(record.birthHeight),
                    birthWeight: aes256Encrypt(record.birthWeight),
                    motherName: aes256Encrypt(record.motherName),
                    fatherName: aes256Encrypt(record.fatherName),
                    healthCenter: aes256Encrypt(record.healthCenter),
                    email: aes256Encrypt(record.email),
                    contactNumber: aes256Encrypt(record.contactNumber),
                    bcgVaccineDate: aes256Encrypt(record.bcgVaccineDate),
                    bcgVaccineRemarks: aes256Encrypt(record.bcgVaccineRemarks),
                    hepatitisBVaccineDate: aes256Encrypt(record.hepatitisBVaccineDate),
                    hepatitisBVaccineRemarks: aes256Encrypt(record.hepatitisBVaccineRemarks),
                    pentavalent1Date: aes256Encrypt(record.pentavalent1Date),
                    pentavalent1Remarks: aes256Encrypt(record.pentavalent1Remarks),
                    pentavalent2Date: aes256Encrypt(record.pentavalent2Date),
                    pentavalent2Remarks: aes256Encrypt(record.pentavalent2Remarks),
                    pentavalent3Date: aes256Encrypt(record.pentavalent3Date),
                    pentavalent3Remarks: aes256Encrypt(record.pentavalent3Remarks),
                    opv1Date: aes256Encrypt(record.opv1Date),
                    opv1Remarks: aes256Encrypt(record.opv1Remarks),
                    opv2Date: aes256Encrypt(record.opv2Date),
                    opv2Remarks: aes256Encrypt(record.opv2Remarks),
                    opv3Date: aes256Encrypt(record.opv3Date),
                    opv3Remarks: aes256Encrypt(record.opv3Remarks),
                    ipv1Date: aes256Encrypt(record.ipv1Date),
                    ipv1Remarks: aes256Encrypt(record.ipv1Remarks),
                    ipv2Date: aes256Encrypt(record.ipv2Date),
                    ipv2Remarks: aes256Encrypt(record.ipv2Remarks),
                    pcv1Date: aes256Encrypt(record.pcv1Date),
                    pcv1Remarks: aes256Encrypt(record.pcv1Remarks),
                    pcv2Date: aes256Encrypt(record.pcv2Date),
                    pcv2Remarks: aes256Encrypt(record.pcv2Remarks),
                    pcv3Date: aes256Encrypt(record.pcv3Date),
                    pcv3Remarks: aes256Encrypt(record.pcv3Remarks),
                    mmr1Date: aes256Encrypt(record.mmr1Date),
                    mmr1Remarks: aes256Encrypt(record.mmr1Remarks),
                    mmr2Date: aes256Encrypt(record.mmr2Date),
                    mmr2Remarks: aes256Encrypt(record.mmr2Remarks),
                    createdAt: aes256Encrypt(record.createdAt)
                })) : [],
                heeadsssRecords: data.heeadsssRecords ? data.heeadsssRecords.map(record => ({
                    fullName: asymmetricEncrypt(record.fullName),
                    age: asymmetricEncrypt(record.age),
                    gender: asymmetricEncrypt(record.gender),
                    address: asymmetricEncrypt(record.address),
                    contactNumber: asymmetricEncrypt(record.contactNumber),
                    homeEnvironment: asymmetricEncrypt(record.homeEnvironment),
                    familyRelationship: asymmetricEncrypt(record.familyRelationship),
                    schoolPerformance: asymmetricEncrypt(record.schoolPerformance),
                    educationCurrentlyStudying: asymmetricEncrypt(record.educationCurrentlyStudying),
                    careerPlans: asymmetricEncrypt(record.careerPlans),
                    dietDescription: asymmetricEncrypt(record.dietDescription),
                    hobbies: asymmetricEncrypt(record.hobbies),
                    physicalActivity: asymmetricEncrypt(record.physicalActivity),
                    drugsAlcoholUse: asymmetricEncrypt(record.drugsAlcoholUse),
                    sexualActivity: asymmetricEncrypt(record.sexualActivity),
                    feelsSafeAtHome: asymmetricEncrypt(record.feelsSafeAtHome),
                    suicidalThoughts: asymmetricEncrypt(record.suicidalThoughts),
                    assessmentNotes: asymmetricEncrypt(record.assessmentNotes),
                    recommendedActions: asymmetricEncrypt(record.recommendedActions),
                    followUpPlan: asymmetricEncrypt(record.followUpPlan),
                    assessedBy: asymmetricEncrypt(record.assessedBy),
                    createdAt: asymmetricEncrypt(record.createdAt)
                })) : [],
                ncdRecords: data.ncdRecords ? data.ncdRecords.map(record => ({
                    firstName: aes256Encrypt(record.firstName),
                    lastName: aes256Encrypt(record.lastName),
                    middleName: aes256Encrypt(record.middleName),
                    edad: aes256Encrypt(record.edad),
                    kasarian: aes256Encrypt(record.kasarian),
                    address: aes256Encrypt(record.address),
                    barangay: aes256Encrypt(record.barangay),
                    telepono: aes256Encrypt(record.telepono),
                    birthday: aes256Encrypt(record.birthday),
                    relihiyon: aes256Encrypt(record.relihiyon),
                    occupation: aes256Encrypt(record.occupation),
                    civilStatus: aes256Encrypt(record.civilStatus),
                    hasDiabetes: aes256Encrypt(record.hasDiabetes),
                    hasHypertension: aes256Encrypt(record.hasHypertension),
                    hasCancer: aes256Encrypt(record.hasCancer),
                    hasCOPD: aes256Encrypt(record.hasCOPD),
                    hasLungDisease: aes256Encrypt(record.hasLungDisease),
                    hasEyeDisease: aes256Encrypt(record.hasEyeDisease),
                    cancerType: aes256Encrypt(record.cancerType),
                    familyHasHypertension: aes256Encrypt(record.familyHasHypertension),
                    familyHasHeartDisease: aes256Encrypt(record.familyHasHeartDisease),
                    familyHasStroke: aes256Encrypt(record.familyHasStroke),
                    familyHasDiabetes: aes256Encrypt(record.familyHasDiabetes),
                    familyHasCancer: aes256Encrypt(record.familyHasCancer),
                    familyHasKidneyDisease: aes256Encrypt(record.familyHasKidneyDisease),
                    familyHasOtherDisease: aes256Encrypt(record.familyHasOtherDisease),
                    familyOtherDiseaseDetails: aes256Encrypt(record.familyOtherDiseaseDetails),
                    smokingStatus: aes256Encrypt(record.smokingStatus),
                    highSaltIntake: aes256Encrypt(record.highSaltIntake),
                    alcoholFrequency: aes256Encrypt(record.alcoholFrequency),
                    alcoholConsumption: aes256Encrypt(record.alcoholConsumption),
                    exerciseDuration: aes256Encrypt(record.exerciseDuration),
                    riskStatus: aes256Encrypt(record.riskStatus),
                    chestPain: aes256Encrypt(record.chestPain),
                    chestPainLocation: aes256Encrypt(record.chestPainLocation),
                    chestPainValue: aes256Encrypt(record.chestPainValue),
                    hasDifficultyBreathing: aes256Encrypt(record.hasDifficultyBreathing),
                    hasAsthma: aes256Encrypt(record.hasAsthma),
                    hasNoRegularExercise: aes256Encrypt(record.hasNoRegularExercise),
                    appointmentType: aes256Encrypt(record.appointmentType),
                    cancerMedication: aes256Encrypt(record.cancerMedication),
                    cancerYear: aes256Encrypt(record.cancerYear),
                    diabetesMedication: aes256Encrypt(record.diabetesMedication),
                    diabetesYear: aes256Encrypt(record.diabetesYear),
                    hypertensionMedication: aes256Encrypt(record.hypertensionMedication),
                    hypertensionYear: aes256Encrypt(record.hypertensionYear),
                    lungDiseaseMedication: aes256Encrypt(record.lungDiseaseMedication),
                    lungDiseaseYear: aes256Encrypt(record.lungDiseaseYear),
                    createdAt: aes256Encrypt(record.createdAt)
                })) : []
            };
            return encryptedData;
        }

        function generateFamilyDetails(familyId) {
            // If we have decrypted data, show it directly
            if (encryptedFamilyData) {
                return buildFamilyDetailsHTML(encryptedFamilyData);
            } else {
                // If no decrypted data, fetch encrypted data from server
                fetch(`/Admin/ImmunizationArchive?handler=GetFamilyDetails&familyId=${familyId}`)
                    .then(response => response.json())
                    .then(data => {
                        // Server now returns encrypted data, so show it directly
                        var contentDiv = document.getElementById('viewDetailsContent');
                        contentDiv.innerHTML = buildEncryptedFamilyDetailsHTML(data);
                    })
                    .catch(error => {
                        console.error('Error fetching family details:', error);
                        var contentDiv = document.getElementById('viewDetailsContent');
                        contentDiv.innerHTML = '<div class="alert alert-danger">Error loading family details. Please try again.</div>';
                    });
                
                // Return loading message while fetching
                return `
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2">Loading family details...</p>
                    </div>
                `;
            }
        }

        function buildEncryptedFamilyDetailsHTML(data) {
            var html = `
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="alert alert-warning">
                            <h6><i class="fas fa-lock me-2"></i>Data is Encrypted</h6>
                            <p class="mb-2">Enter the decryption key to view sensitive data:</p>
                            <div class="input-group">
                                <input type="password" id="modalDecryptKey" class="form-control" placeholder="Enter decryption key">
                                <button class="btn btn-success" onclick="decryptModalData()">
                                    <i class="fas fa-unlock me-2"></i>Decrypt
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="fas fa-home text-primary me-2"></i>Family Information</h6>
                        <p><strong>Family Number:</strong> <span class="encrypted-field" data-field="familyNumber">${replaceEncryptedWithRandom(data.familyNumber)}</span></p>
                        <p><strong>Family Name:</strong> <span class="encrypted-field" data-field="familyName">${replaceEncryptedWithRandom(data.familyName)}</span></p>
                        <p><strong>Address:</strong> <span class="encrypted-field" data-field="address">${replaceEncryptedWithRandom(data.address)}</span></p>
                        <p><strong>Barangay:</strong> <span class="encrypted-field" data-field="barangay">${replaceEncryptedWithRandom(data.barangay)}</span></p>
                        <p><strong>Contact:</strong> <span class="encrypted-field" data-field="contactInfo">${replaceEncryptedWithRandom(data.contactInfo)}</span></p>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="fas fa-chart-bar text-info me-2"></i>Family Statistics</h6>
                        <p><strong>Total Records:</strong> <span class="encrypted-field" data-field="totalRecords">${replaceEncryptedWithRandom(data.totalRecords)}</span></p>
                        <p><strong>Immunization Records:</strong> <span class="encrypted-field" data-field="immunizationCount">${replaceEncryptedWithRandom(data.immunizationCount)}</span></p>
                        <p><strong>NCD Forms:</strong> <span class="encrypted-field" data-field="ncdCount">${replaceEncryptedWithRandom(data.ncdCount)}</span></p>
                        <p><strong>HEEADSSS Forms:</strong> <span class="encrypted-field" data-field="heeadsssCount">${replaceEncryptedWithRandom(data.heeadsssCount)}</span></p>
                        <p><strong>Vital Signs:</strong> <span class="encrypted-field" data-field="vitalSignsCount">${replaceEncryptedWithRandom(data.vitalSignsCount)}</span></p>
                    </div>
                </div>`;

            // Add immunization records if any
            if (data.immunizationRecords && data.immunizationRecords.length > 0) {
                html += `
                    <div class="row mt-4">
                        <div class="col-12">
                            <h6><i class="fas fa-syringe text-success me-2"></i>Immunization Records (${data.immunizationRecords.length} Records)</h6>
                            <div class="row">`;
                
                data.immunizationRecords.forEach((record, index) => {
                    html += `
                        <div class="col-md-4">
                            <div class="record-card">
                                <h6>Record #${index + 1}</h6>
                                <p><strong>Child Name:</strong> <span class="encrypted-field" data-field="childName">${replaceEncryptedWithRandom(record.childName)}</span></p>
                                <p><strong>Birth Date:</strong> <span class="encrypted-field" data-field="dateOfBirth">${replaceEncryptedWithRandom(record.dateOfBirth)}</span></p>
                                <p><strong>Sex:</strong> <span class="encrypted-field" data-field="sex">${replaceEncryptedWithRandom(record.sex)}</span></p>
                                <p><strong>Place of Birth:</strong> <span class="encrypted-field" data-field="placeOfBirth">${replaceEncryptedWithRandom(record.placeOfBirth)}</span></p>
                                <p><strong>Birth Height:</strong> <span class="encrypted-field" data-field="birthHeight">${replaceEncryptedWithRandom(record.birthHeight)}</span></p>
                                <p><strong>Birth Weight:</strong> <span class="encrypted-field" data-field="birthWeight">${replaceEncryptedWithRandom(record.birthWeight)}</span></p>
                                <p><strong>Mother:</strong> <span class="encrypted-field" data-field="motherName">${replaceEncryptedWithRandom(record.motherName)}</span></p>
                                <p><strong>Father:</strong> <span class="encrypted-field" data-field="fatherName">${replaceEncryptedWithRandom(record.fatherName)}</span></p>
                                <p><strong>Health Center:</strong> <span class="encrypted-field" data-field="healthCenter">${replaceEncryptedWithRandom(record.healthCenter)}</span></p>
                                <p><strong>Email:</strong> <span class="encrypted-field" data-field="email">${replaceEncryptedWithRandom(record.email)}</span></p>
                                <p><strong>Contact:</strong> <span class="encrypted-field" data-field="contactNumber">${replaceEncryptedWithRandom(record.contactNumber)}</span></p>
                                <p><strong>BCG Vaccine:</strong> <span style="color: #28a745;">${record.bcgVaccineDate ? record.bcgVaccineDate + ' - ' + record.bcgVaccineRemarks : 'Not given'}</span></p>
                                <p><strong>Hepatitis B:</strong> <span style="color: #28a745;">${record.hepatitisBVaccineDate ? record.hepatitisBVaccineDate + ' - ' + record.hepatitisBVaccineRemarks : 'Not given'}</span></p>
                                <p><strong>Pentavalent 1:</strong> <span style="color: #28a745;">${record.pentavalent1Date ? record.pentavalent1Date + ' - ' + record.pentavalent1Remarks : 'Not given'}</span></p>
                                <p><strong>Pentavalent 2:</strong> <span style="color: #28a745;">${record.pentavalent2Date ? record.pentavalent2Date + ' - ' + record.pentavalent2Remarks : 'Not given'}</span></p>
                                <p><strong>Pentavalent 3:</strong> <span style="color: #28a745;">${record.pentavalent3Date ? record.pentavalent3Date + ' - ' + record.pentavalent3Remarks : 'Not given'}</span></p>
                                <p><strong>OPV 1:</strong> <span style="color: #28a745;">${record.opv1Date ? record.opv1Date + ' - ' + record.opv1Remarks : 'Not given'}</span></p>
                                <p><strong>OPV 2:</strong> <span style="color: #28a745;">${record.opv2Date ? record.opv2Date + ' - ' + record.opv2Remarks : 'Not given'}</span></p>
                                <p><strong>OPV 3:</strong> <span style="color: #28a745;">${record.opv3Date ? record.opv3Date + ' - ' + record.opv3Remarks : 'Not given'}</span></p>
                                <p><strong>IPV 1:</strong> <span style="color: #28a745;">${record.ipv1Date ? record.ipv1Date + ' - ' + record.ipv1Remarks : 'Not given'}</span></p>
                                <p><strong>IPV 2:</strong> <span style="color: #28a745;">${record.ipv2Date ? record.ipv2Date + ' - ' + record.ipv2Remarks : 'Not given'}</span></p>
                                <p><strong>PCV 1:</strong> <span style="color: #28a745;">${record.pcv1Date ? record.pcv1Date + ' - ' + record.pcv1Remarks : 'Not given'}</span></p>
                                <p><strong>PCV 2:</strong> <span style="color: #28a745;">${record.pcv2Date ? record.pcv2Date + ' - ' + record.pcv2Remarks : 'Not given'}</span></p>
                                <p><strong>PCV 3:</strong> <span style="color: #28a745;">${record.pcv3Date ? record.pcv3Date + ' - ' + record.pcv3Remarks : 'Not given'}</span></p>
                                <p><strong>MMR 1:</strong> <span style="color: #28a745;">${record.mmr1Date ? record.mmr1Date + ' - ' + record.mmr1Remarks : 'Not given'}</span></p>
                                <p><strong>MMR 2:</strong> <span style="color: #28a745;">${record.mmr2Date ? record.mmr2Date + ' - ' + record.mmr2Remarks : 'Not given'}</span></p>
                                <p><strong>Created:</strong> <span class="encrypted-field" data-field="createdAt">${replaceEncryptedWithRandom(record.createdAt)}</span></p>
                            </div>
                        </div>`;
                });
                
                html += `
                            </div>
                        </div>
                    </div>`;
            }

            // Add HEEADSSS records if any
            if (data.heeadsssRecords && data.heeadsssRecords.length > 0) {
                html += `
                    <div class="row mt-4">
                        <div class="col-12">
                            <h6><i class="fas fa-user-graduate text-info me-2"></i>HEEADSSS Assessments (${data.heeadsssRecords.length} Records)</h6>
                            <div class="row">`;
                
                data.heeadsssRecords.forEach((record, index) => {
                    html += `
                        <div class="col-md-6">
                            <div class="record-card">
                                <h6>Assessment #${index + 1}</h6>
                                <p><strong>Full Name:</strong> <span class="encrypted-field" data-field="fullName">${replaceEncryptedWithRandom(record.fullName)}</span></p>
                                <p><strong>Age:</strong> ${record.age}</p>
                                <p><strong>Gender:</strong> <span class="encrypted-field" data-field="gender">${replaceEncryptedWithRandom(record.gender)}</span></p>
                                <p><strong>Address:</strong> <span class="encrypted-field" data-field="address">${replaceEncryptedWithRandom(record.address)}</span></p>
                                <p><strong>Contact:</strong> <span class="encrypted-field" data-field="contactNumber">${replaceEncryptedWithRandom(record.contactNumber)}</span></p>
                                <p><strong>Home Environment:</strong> <span class="encrypted-field" data-field="homeEnvironment">${replaceEncryptedWithRandom(record.homeEnvironment)}</span></p>
                                <p><strong>Family Relationship:</strong> <span class="encrypted-field" data-field="familyRelationship">${replaceEncryptedWithRandom(record.familyRelationship)}</span></p>
                                <p><strong>School Performance:</strong> <span class="encrypted-field" data-field="schoolPerformance">${replaceEncryptedWithRandom(record.schoolPerformance)}</span></p>
                                <p><strong>Education:</strong> <span class="encrypted-field" data-field="educationCurrentlyStudying">${replaceEncryptedWithRandom(record.educationCurrentlyStudying)}</span></p>
                                <p><strong>Career Plans:</strong> <span class="encrypted-field" data-field="careerPlans">${replaceEncryptedWithRandom(record.careerPlans)}</span></p>
                                <p><strong>Diet Description:</strong> <span class="encrypted-field" data-field="dietDescription">${replaceEncryptedWithRandom(record.dietDescription)}</span></p>
                                <p><strong>Hobbies:</strong> <span class="encrypted-field" data-field="hobbies">${replaceEncryptedWithRandom(record.hobbies)}</span></p>
                                <p><strong>Physical Activity:</strong> <span class="encrypted-field" data-field="physicalActivity">${replaceEncryptedWithRandom(record.physicalActivity)}</span></p>
                                <p><strong>Drugs/Alcohol:</strong> <span class="encrypted-field" data-field="drugsAlcoholUse">${replaceEncryptedWithRandom(record.drugsAlcoholUse)}</span></p>
                                <p><strong>Sexual Activity:</strong> <span class="encrypted-field" data-field="sexualActivity">${replaceEncryptedWithRandom(record.sexualActivity)}</span></p>
                                <p><strong>Feels Safe at Home:</strong> ${record.feelsSafeAtHome ? 'Yes' : 'No'}</p>
                                <p><strong>Suicidal Thoughts:</strong> ${record.suicidalThoughts ? 'Yes' : 'No'}</p>
                                <p><strong>Assessment Notes:</strong> <span class="encrypted-field" data-field="assessmentNotes">${replaceEncryptedWithRandom(record.assessmentNotes)}</span></p>
                                <p><strong>Recommended Actions:</strong> <span class="encrypted-field" data-field="recommendedActions">${replaceEncryptedWithRandom(record.recommendedActions)}</span></p>
                                <p><strong>Follow-up Plan:</strong> <span class="encrypted-field" data-field="followUpPlan">${replaceEncryptedWithRandom(record.followUpPlan)}</span></p>
                                <p><strong>Assessed By:</strong> <span class="encrypted-field" data-field="assessedBy">${replaceEncryptedWithRandom(record.assessedBy)}</span></p>
                                <p><strong>Created:</strong> <span class="encrypted-field" data-field="createdAt">${replaceEncryptedWithRandom(record.createdAt)}</span></p>
                            </div>
                        </div>`;
                });
                
                html += `
                            </div>
                        </div>
                    </div>`;
            }

            // Add NCD records if any
            if (data.ncdRecords && data.ncdRecords.length > 0) {
                html += `
                    <div class="row mt-4">
                        <div class="col-12">
                            <h6><i class="fas fa-heart text-danger me-2"></i>NCD Risk Assessment (${data.ncdRecords.length} Records)</h6>
                            <div class="row">`;
                
                data.ncdRecords.forEach((record, index) => {
                    html += `
                        <div class="col-md-6">
                            <div class="record-card">
                                <h6>Assessment #${index + 1}</h6>
                                <p><strong>Patient Name:</strong> <span class="encrypted-field" data-field="firstName">${replaceEncryptedWithRandom(record.firstName)}</span> <span class="encrypted-field" data-field="middleName">${replaceEncryptedWithRandom(record.middleName)}</span> <span class="encrypted-field" data-field="lastName">${replaceEncryptedWithRandom(record.lastName)}</span></p>
                                <p><strong>Age:</strong> <span class="encrypted-field" data-field="edad">${replaceEncryptedWithRandom(record.edad)}</span></p>
                                <p><strong>Gender:</strong> <span class="encrypted-field" data-field="kasarian">${replaceEncryptedWithRandom(record.kasarian)}</span></p>
                                <p><strong>Address:</strong> <span class="encrypted-field" data-field="address">${replaceEncryptedWithRandom(record.address)}</span></p>
                                <p><strong>Barangay:</strong> <span class="encrypted-field" data-field="barangay">${replaceEncryptedWithRandom(record.barangay)}</span></p>
                                <p><strong>Contact:</strong> <span class="encrypted-field" data-field="telepono">${replaceEncryptedWithRandom(record.telepono)}</span></p>
                                <p><strong>Birthday:</strong> <span class="encrypted-field" data-field="birthday">${replaceEncryptedWithRandom(record.birthday)}</span></p>
                                <p><strong>Religion:</strong> <span class="encrypted-field" data-field="relihiyon">${replaceEncryptedWithRandom(record.relihiyon)}</span></p>
                                <p><strong>Occupation:</strong> <span class="encrypted-field" data-field="occupation">${replaceEncryptedWithRandom(record.occupation)}</span></p>
                                <p><strong>Civil Status:</strong> <span class="encrypted-field" data-field="civilStatus">${replaceEncryptedWithRandom(record.civilStatus)}</span></p>
                                <p><strong>Diabetes:</strong> <span class="encrypted-field" data-field="hasDiabetes">${replaceEncryptedWithRandom(record.hasDiabetes ? 'Yes' : 'No')}</span></p>
                                <p><strong>Hypertension:</strong> <span class="encrypted-field" data-field="hasHypertension">${replaceEncryptedWithRandom(record.hasHypertension ? 'Yes' : 'No')}</span></p>
                                <p><strong>Cancer:</strong> <span class="encrypted-field" data-field="hasCancer">${replaceEncryptedWithRandom(record.hasCancer ? 'Yes' : 'No')}</span></p>
                                <p><strong>COPD:</strong> <span class="encrypted-field" data-field="hasCOPD">${replaceEncryptedWithRandom(record.hasCOPD ? 'Yes' : 'No')}</span></p>
                                <p><strong>Lung Disease:</strong> <span class="encrypted-field" data-field="hasLungDisease">${replaceEncryptedWithRandom(record.hasLungDisease ? 'Yes' : 'No')}</span></p>
                                <p><strong>Eye Disease:</strong> <span class="encrypted-field" data-field="hasEyeDisease">${replaceEncryptedWithRandom(record.hasEyeDisease ? 'Yes' : 'No')}</span></p>
                                <p><strong>Cancer Type:</strong> <span class="encrypted-field" data-field="cancerType">${replaceEncryptedWithRandom(record.cancerType)}</span></p>
                                <p><strong>Family History:</strong></p>
                                <p style="margin-left: 20px;">• Hypertension: <span class="encrypted-field" data-field="familyHasHypertension">${replaceEncryptedWithRandom(record.familyHasHypertension ? 'Yes' : 'No')}</span></p>
                                <p style="margin-left: 20px;">• Heart Disease: <span class="encrypted-field" data-field="familyHasHeartDisease">${replaceEncryptedWithRandom(record.familyHasHeartDisease ? 'Yes' : 'No')}</span></p>
                                <p style="margin-left: 20px;">• Stroke: <span class="encrypted-field" data-field="familyHasStroke">${replaceEncryptedWithRandom(record.familyHasStroke ? 'Yes' : 'No')}</span></p>
                                <p style="margin-left: 20px;">• Diabetes: <span class="encrypted-field" data-field="familyHasDiabetes">${replaceEncryptedWithRandom(record.familyHasDiabetes ? 'Yes' : 'No')}</span></p>
                                <p style="margin-left: 20px;">• Cancer: <span class="encrypted-field" data-field="familyHasCancer">${replaceEncryptedWithRandom(record.familyHasCancer ? 'Yes' : 'No')}</span></p>
                                <p style="margin-left: 20px;">• Kidney Disease: <span class="encrypted-field" data-field="familyHasKidneyDisease">${replaceEncryptedWithRandom(record.familyHasKidneyDisease ? 'Yes' : 'No')}</span></p>
                                <p style="margin-left: 20px;">• Other: <span class="encrypted-field" data-field="familyHasOtherDisease">${replaceEncryptedWithRandom(record.familyHasOtherDisease ? 'Yes' : 'No')}</span></p>
                                <p><strong>Family Other Details:</strong> <span class="encrypted-field" data-field="familyOtherDiseaseDetails">${replaceEncryptedWithRandom(record.familyOtherDiseaseDetails)}</span></p>
                                <p><strong>Smoking Status:</strong> <span class="encrypted-field" data-field="smokingStatus">${replaceEncryptedWithRandom(record.smokingStatus)}</span></p>
                                <p><strong>High Salt Intake:</strong> <span class="encrypted-field" data-field="highSaltIntake">${replaceEncryptedWithRandom(record.highSaltIntake ? 'Yes' : 'No')}</span></p>
                                <p><strong>Alcohol Frequency:</strong> <span class="encrypted-field" data-field="alcoholFrequency">${replaceEncryptedWithRandom(record.alcoholFrequency)}</span></p>
                                <p><strong>Alcohol Consumption:</strong> <span class="encrypted-field" data-field="alcoholConsumption">${replaceEncryptedWithRandom(record.alcoholConsumption)}</span></p>
                                <p><strong>Exercise Duration:</strong> <span class="encrypted-field" data-field="exerciseDuration">${replaceEncryptedWithRandom(record.exerciseDuration)}</span></p>
                                <p><strong>Risk Status:</strong> <span class="encrypted-field" data-field="riskStatus">${replaceEncryptedWithRandom(record.riskStatus)}</span></p>
                                <p><strong>Chest Pain:</strong> <span class="encrypted-field" data-field="chestPain">${replaceEncryptedWithRandom(record.chestPain)}</span></p>
                                <p><strong>Chest Pain Location:</strong> <span class="encrypted-field" data-field="chestPainLocation">${replaceEncryptedWithRandom(record.chestPainLocation)}</span></p>
                                <p><strong>Chest Pain Value:</strong> <span class="encrypted-field" data-field="chestPainValue">${replaceEncryptedWithRandom(record.chestPainValue)}</span></p>
                                <p><strong>Difficulty Breathing:</strong> <span class="encrypted-field" data-field="hasDifficultyBreathing">${replaceEncryptedWithRandom(record.hasDifficultyBreathing ? 'Yes' : 'No')}</span></p>
                                <p><strong>Asthma:</strong> <span class="encrypted-field" data-field="hasAsthma">${replaceEncryptedWithRandom(record.hasAsthma ? 'Yes' : 'No')}</span></p>
                                <p><strong>No Regular Exercise:</strong> <span class="encrypted-field" data-field="hasNoRegularExercise">${replaceEncryptedWithRandom(record.hasNoRegularExercise ? 'Yes' : 'No')}</span></p>
                                <p><strong>Appointment Type:</strong> <span class="encrypted-field" data-field="appointmentType">${replaceEncryptedWithRandom(record.appointmentType)}</span></p>
                                <p><strong>Medications:</strong></p>
                                <p style="margin-left: 20px;">• Cancer: <span class="encrypted-field" data-field="cancerMedication">${replaceEncryptedWithRandom(record.cancerMedication)}</span> (Year: <span class="encrypted-field" data-field="cancerYear">${replaceEncryptedWithRandom(record.cancerYear)}</span>)</p>
                                <p style="margin-left: 20px;">• Diabetes: <span class="encrypted-field" data-field="diabetesMedication">${replaceEncryptedWithRandom(record.diabetesMedication)}</span> (Year: <span class="encrypted-field" data-field="diabetesYear">${replaceEncryptedWithRandom(record.diabetesYear)}</span>)</p>
                                <p style="margin-left: 20px;">• Hypertension: <span class="encrypted-field" data-field="hypertensionMedication">${replaceEncryptedWithRandom(record.hypertensionMedication)}</span> (Year: <span class="encrypted-field" data-field="hypertensionYear">${replaceEncryptedWithRandom(record.hypertensionYear)}</span>)</p>
                                <p style="margin-left: 20px;">• Lung Disease: <span class="encrypted-field" data-field="lungDiseaseMedication">${replaceEncryptedWithRandom(record.lungDiseaseMedication)}</span> (Year: <span class="encrypted-field" data-field="lungDiseaseYear">${replaceEncryptedWithRandom(record.lungDiseaseYear)}</span>)</p>
                                <p><strong>Created:</strong> <span class="encrypted-field" data-field="createdAt">${replaceEncryptedWithRandom(record.createdAt)}</span></p>
                            </div>
                        </div>`;
                });
                
                html += `
                            </div>
                        </div>
                    </div>`;
            }

            return html;
        }

        function buildFamilyDetailsHTML(data) {
            var html = `
                <div class="row">
                    <div class="col-md-6">
                        <h6><i class="fas fa-home text-primary me-2"></i>Family Information</h6>
                        <p><strong>Family Number:</strong> <span style="color: #28a745;">${data.familyNumber}</span></p>
                        <p><strong>Family Name:</strong> <span style="color: #28a745;">${data.familyName}</span></p>
                        <p><strong>Address:</strong> <span style="color: #28a745;">${data.address}</span></p>
                        <p><strong>Barangay:</strong> <span style="color: #28a745;">${data.barangay}</span></p>
                        <p><strong>Contact:</strong> <span style="color: #28a745;">${data.contactInfo}</span></p>
                    </div>
                    <div class="col-md-6">
                        <h6><i class="fas fa-chart-bar text-info me-2"></i>Family Statistics</h6>
                        <p><strong>Total Records:</strong> <span class="encrypted-field" data-field="totalRecords">${replaceEncryptedWithRandom(data.totalRecords)}</span></p>
                        <p><strong>Immunization Records:</strong> <span class="encrypted-field" data-field="immunizationCount">${replaceEncryptedWithRandom(data.immunizationCount)}</span></p>
                        <p><strong>NCD Forms:</strong> <span class="encrypted-field" data-field="ncdCount">${replaceEncryptedWithRandom(data.ncdCount)}</span></p>
                        <p><strong>HEEADSSS Forms:</strong> <span class="encrypted-field" data-field="heeadsssCount">${replaceEncryptedWithRandom(data.heeadsssCount)}</span></p>
                        <p><strong>Vital Signs:</strong> <span class="encrypted-field" data-field="vitalSignsCount">${replaceEncryptedWithRandom(data.vitalSignsCount)}</span></p>
                    </div>
                </div>`;

            // Add immunization records if any
            if (data.immunizationRecords && data.immunizationRecords.length > 0) {
                html += `
                    <div class="row mt-4">
                        <div class="col-12">
                            <h6><i class="fas fa-syringe text-success me-2"></i>Immunization Records (${data.immunizationRecords.length} Records)</h6>
                            <div class="row">`;
                
                data.immunizationRecords.forEach((record, index) => {
                    html += `
                        <div class="col-md-4">
                            <div class="record-card">
                                <h6>Record #${index + 1}</h6>
                                <p><strong>Child Name:</strong> <span style="color: #28a745;">${record.childName}</span></p>
                                <p><strong>Birth Date:</strong> <span style="color: #28a745;">${record.dateOfBirth}</span></p>
                                <p><strong>Sex:</strong> <span style="color: #28a745;">${record.sex}</span></p>
                                <p><strong>Place of Birth:</strong> <span style="color: #28a745;">${record.placeOfBirth}</span></p>
                                <p><strong>Birth Height:</strong> <span style="color: #28a745;">${record.birthHeight}</span></p>
                                <p><strong>Birth Weight:</strong> <span style="color: #28a745;">${record.birthWeight}</span></p>
                                <p><strong>Mother:</strong> <span style="color: #28a745;">${record.motherName}</span></p>
                                <p><strong>Father:</strong> <span style="color: #28a745;">${record.fatherName}</span></p>
                                <p><strong>Health Center:</strong> <span style="color: #28a745;">${record.healthCenter}</span></p>
                                <p><strong>Email:</strong> <span style="color: #28a745;">${record.email}</span></p>
                                <p><strong>Contact:</strong> <span style="color: #28a745;">${record.contactNumber}</span></p>
                                <p><strong>BCG Vaccine:</strong> <span style="color: #28a745;">${record.bcgVaccineDate ? record.bcgVaccineDate + ' - ' + record.bcgVaccineRemarks : 'Not given'}</span></p>
                                <p><strong>Hepatitis B:</strong> <span style="color: #28a745;">${record.hepatitisBVaccineDate ? record.hepatitisBVaccineDate + ' - ' + record.hepatitisBVaccineRemarks : 'Not given'}</span></p>
                                <p><strong>Pentavalent 1:</strong> <span style="color: #28a745;">${record.pentavalent1Date ? record.pentavalent1Date + ' - ' + record.pentavalent1Remarks : 'Not given'}</span></p>
                                <p><strong>Pentavalent 2:</strong> <span style="color: #28a745;">${record.pentavalent2Date ? record.pentavalent2Date + ' - ' + record.pentavalent2Remarks : 'Not given'}</span></p>
                                <p><strong>Pentavalent 3:</strong> <span style="color: #28a745;">${record.pentavalent3Date ? record.pentavalent3Date + ' - ' + record.pentavalent3Remarks : 'Not given'}</span></p>
                                <p><strong>OPV 1:</strong> <span style="color: #28a745;">${record.opv1Date ? record.opv1Date + ' - ' + record.opv1Remarks : 'Not given'}</span></p>
                                <p><strong>OPV 2:</strong> <span style="color: #28a745;">${record.opv2Date ? record.opv2Date + ' - ' + record.opv2Remarks : 'Not given'}</span></p>
                                <p><strong>OPV 3:</strong> <span style="color: #28a745;">${record.opv3Date ? record.opv3Date + ' - ' + record.opv3Remarks : 'Not given'}</span></p>
                                <p><strong>IPV 1:</strong> <span style="color: #28a745;">${record.ipv1Date ? record.ipv1Date + ' - ' + record.ipv1Remarks : 'Not given'}</span></p>
                                <p><strong>IPV 2:</strong> <span style="color: #28a745;">${record.ipv2Date ? record.ipv2Date + ' - ' + record.ipv2Remarks : 'Not given'}</span></p>
                                <p><strong>PCV 1:</strong> <span style="color: #28a745;">${record.pcv1Date ? record.pcv1Date + ' - ' + record.pcv1Remarks : 'Not given'}</span></p>
                                <p><strong>PCV 2:</strong> <span style="color: #28a745;">${record.pcv2Date ? record.pcv2Date + ' - ' + record.pcv2Remarks : 'Not given'}</span></p>
                                <p><strong>PCV 3:</strong> <span style="color: #28a745;">${record.pcv3Date ? record.pcv3Date + ' - ' + record.pcv3Remarks : 'Not given'}</span></p>
                                <p><strong>MMR 1:</strong> <span style="color: #28a745;">${record.mmr1Date ? record.mmr1Date + ' - ' + record.mmr1Remarks : 'Not given'}</span></p>
                                <p><strong>MMR 2:</strong> <span style="color: #28a745;">${record.mmr2Date ? record.mmr2Date + ' - ' + record.mmr2Remarks : 'Not given'}</span></p>
                                <p><strong>Created:</strong> <span style="color: #28a745;">${record.createdAt}</span></p>
                            </div>
                        </div>
                    `;
                });
                
                html += `</div></div></div>`;
            }

            // Add HEEADSSS Records
            if (data.heeadsssRecords && data.heeadsssRecords.length > 0) {
                html += `<hr><div class="row"><div class="col-12"><h6><i class="fas fa-clipboard-list text-warning me-2"></i>HEEADSSS Assessment (${data.heeadsssRecords.length} Records)</h6><div class="row">`;
                
                data.heeadsssRecords.forEach((record, index) => {
                    html += `
                        <div class="col-md-6">
                            <div class="record-card">
                                <h6>Assessment #${index + 1}</h6>
                                <p><strong>Patient Name:</strong> <span style="color: #28a745;">${record.fullName}</span></p>
                                <p><strong>Age:</strong> ${record.age}</p>
                                <p><strong>Gender:</strong> <span style="color: #28a745;">${record.gender}</span></p>
                                <p><strong>Address:</strong> <span style="color: #28a745;">${record.address}</span></p>
                                <p><strong>Contact:</strong> <span style="color: #28a745;">${record.contactNumber}</span></p>
                                <p><strong>Home Environment:</strong> <span style="color: #28a745;">${record.homeEnvironment}</span></p>
                                <p><strong>Family Relationship:</strong> <span style="color: #28a745;">${record.familyRelationship}</span></p>
                                <p><strong>School Performance:</strong> <span style="color: #28a745;">${record.schoolPerformance}</span></p>
                                <p><strong>Education:</strong> <span style="color: #28a745;">${record.educationCurrentlyStudying}</span></p>
                                <p><strong>Eating Habits:</strong> <span style="color: #28a745;">${record.dietDescription}</span></p>
                                <p><strong>Activities:</strong> <span style="color: #28a745;">${record.hobbies}</span></p>
                                <p><strong>Physical Activity:</strong> <span style="color: #28a745;">${record.physicalActivity}</span></p>
                                <p><strong>Drugs/Alcohol:</strong> <span style="color: #28a745;">${record.drugsAlcoholUse}</span></p>
                                <p><strong>Sexuality:</strong> <span style="color: #28a745;">${record.sexualActivity}</span></p>
                                <p><strong>Safety:</strong> <span style="color: #28a745;">${record.feelsSafeAtHome}</span></p>
                                <p><strong>Suicide Risk:</strong> <span style="color: #28a745;">${record.suicidalThoughts}</span></p>
                                <p><strong>Assessment Notes:</strong> <span style="color: #28a745;">${record.assessmentNotes}</span></p>
                                <p><strong>Created:</strong> <span style="color: #28a745;">${record.createdAt}</span></p>
                            </div>
                        </div>
                    `;
                });
                
                html += `</div></div></div>`;
            }

            // Add NCD Records
            if (data.ncdRecords && data.ncdRecords.length > 0) {
                html += `<hr><div class="row"><div class="col-12"><h6><i class="fas fa-heartbeat text-danger me-2"></i>NCD Risk Assessment (${data.ncdRecords.length} Records)</h6><div class="row">`;
                
                data.ncdRecords.forEach((record, index) => {
                    html += `
                        <div class="col-md-6">
                            <div class="record-card">
                                <h6>Assessment #${index + 1}</h6>
                                <p><strong>Patient Name:</strong> <span style="color: #28a745;">${record.firstName + ' ' + record.lastName}</span></p>
                                <p><strong>Age:</strong> ${record.edad}</p>
                                <p><strong>Gender:</strong> <span style="color: #28a745;">${record.kasarian}</span></p>
                                <p><strong>Address:</strong> <span style="color: #28a745;">${record.address}</span></p>
                                <p><strong>Barangay:</strong> <span style="color: #28a745;">${record.barangay}</span></p>
                                <p><strong>Contact:</strong> <span style="color: #28a745;">${record.telepono}</span></p>
                                <p><strong>Birthday:</strong> <span style="color: #28a745;">${record.birthday}</span></p>
                                <p><strong>Religion:</strong> <span style="color: #28a745;">${record.relihiyon}</span></p>
                                <p><strong>Occupation:</strong> <span style="color: #28a745;">${record.occupation}</span></p>
                                <p><strong>Civil Status:</strong> <span style="color: #28a745;">${record.civilStatus}</span></p>
                                <p><strong>Diabetes:</strong> ${record.hasDiabetes ? 'Yes' : 'No'}</p>
                                <p><strong>Hypertension:</strong> ${record.hasHypertension ? 'Yes' : 'No'}</p>
                                <p><strong>Cancer:</strong> ${record.hasCancer ? 'Yes' : 'No'}</p>
                                <p><strong>COPD:</strong> <span class="encrypted-field" data-field="hasCOPD">${record.hasCOPD ? 'Yes' : 'No'}</span></p>
                                <p><strong>Lung Disease:</strong> <span class="encrypted-field" data-field="hasLungDisease">${record.hasLungDisease ? 'Yes' : 'No'}</span></p>
                                <p><strong>Eye Disease:</strong> <span class="encrypted-field" data-field="hasEyeDisease">${record.hasEyeDisease ? 'Yes' : 'No'}</span></p>
                                <p><strong>Smoking:</strong> <span style="color: #28a745;">${record.smokingStatus}</span></p>
                                <p><strong>Alcohol:</strong> <span style="color: #28a745;">${record.alcoholConsumption}</span></p>
                                <p><strong>Exercise:</strong> <span style="color: #28a745;">${record.exerciseDuration}</span></p>
                                <p><strong>Risk Status:</strong> <span style="color: #28a745;">${record.riskStatus}</span></p>
                                <p><strong>Created:</strong> <span style="color: #28a745;">${record.createdAt}</span></p>
                            </div>
                        </div>
                    `;
                });
                
                html += `</div></div></div>`;
            }

            return html;
        }

        function checkFamilyDecryptionStatus(familyId) {
            // Check if any element with this family ID shows decrypted data
            var encryptedElements = document.querySelectorAll(`[data-family-id="${familyId}"]`);
            return encryptedElements.length > 0 && !encryptedElements[0].textContent.includes('***');
        }

        function generateFullDetails(recordId, recordType) {
            // This is a placeholder - in a real implementation, you would fetch data from the server
            var details = '';
            
            switch(recordType) {
                case 'immunization':
                    details = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-user text-primary me-2"></i>Child Information</h6>
                                <p><strong>Name:</strong> Encrypted Child Name</p>
                                <p><strong>Birth Date:</strong> Encrypted Birth Date</p>
                                <p><strong>Sex:</strong> Encrypted Sex</p>
                                <p><strong>Place of Birth:</strong> Encrypted Place of Birth</p>
                                <p><strong>Birth Weight:</strong> Encrypted Birth Weight</p>
                                <p><strong>Birth Height:</strong> Encrypted Birth Height</p>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-users text-info me-2"></i>Parent Information</h6>
                                <p><strong>Mother:</strong> Encrypted Mother Name</p>
                                <p><strong>Father:</strong> Encrypted Father Name</p>
                                <p><strong>Contact:</strong> Encrypted Contact Number</p>
                                <p><strong>Email:</strong> Encrypted Email</p>
                                <p><strong>Address:</strong> Encrypted Address</p>
                                <p><strong>Barangay:</strong> Encrypted Barangay</p>
                            </div>
                        </div>
                        <hr>
                        <div class="row">
                            <div class="col-12">
                                <h6><i class="fas fa-syringe text-success me-2"></i>Vaccination Records</h6>
                                <div class="row">
                                    <div class="col-md-4">
                                        <h6>BCG Vaccine</h6>
                                        <p><strong>Date:</strong> Encrypted Date</p>
                                        <p><strong>Remarks:</strong> Encrypted Remarks</p>
                                    </div>
                                    <div class="col-md-4">
                                        <h6>Hepatitis B</h6>
                                        <p><strong>Date:</strong> Encrypted Date</p>
                                        <p><strong>Remarks:</strong> Encrypted Remarks</p>
                                    </div>
                                    <div class="col-md-4">
                                        <h6>Pentavalent</h6>
                                        <p><strong>1st Dose:</strong> Encrypted Date</p>
                                        <p><strong>2nd Dose:</strong> Encrypted Date</p>
                                        <p><strong>3rd Dose:</strong> Encrypted Date</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                    break;
                case 'ncd':
                    details = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-user text-primary me-2"></i>Patient Information</h6>
                                <p><strong>Name:</strong> Patient Full Name</p>
                                <p><strong>Birth Date:</strong> Patient Birthday</p>
                                <p><strong>Age:</strong> Patient Age</p>
                                <p><strong>Gender:</strong> Patient Gender</p>
                                <p><strong>Address:</strong> Patient Address</p>
                                <p><strong>Phone:</strong> Patient Phone</p>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-heartbeat text-danger me-2"></i>Health Assessment</h6>
                                <p><strong>Diabetes:</strong> Assessment Result</p>
                                <p><strong>Hypertension:</strong> Assessment Result</p>
                                <p><strong>Heart Disease:</strong> Assessment Result</p>
                                <p><strong>Cancer:</strong> Assessment Result</p>
                                <p><strong>Risk Status:</strong> Overall Risk</p>
                            </div>
                        </div>
                    `;
                    break;
                case 'heeadsss':
                    details = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-user text-primary me-2"></i>Patient Information</h6>
                                <p><strong>Name:</strong> Patient Full Name</p>
                                <p><strong>Birth Date:</strong> Patient Birthday</p>
                                <p><strong>Age:</strong> Patient Age</p>
                                <p><strong>Gender:</strong> Patient Gender</p>
                                <p><strong>Address:</strong> Patient Address</p>
                                <p><strong>Contact:</strong> Patient Contact</p>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-clipboard-list text-warning me-2"></i>HEEADSSS Assessment</h6>
                                <p><strong>Home:</strong> Home Environment Assessment</p>
                                <p><strong>Education:</strong> Education Assessment</p>
                                <p><strong>Eating:</strong> Eating Habits Assessment</p>
                                <p><strong>Activities:</strong> Activities Assessment</p>
                                <p><strong>Drugs:</strong> Substance Use Assessment</p>
                                <p><strong>Sexuality:</strong> Sexuality Assessment</p>
                                <p><strong>Safety:</strong> Safety Assessment</p>
                                <p><strong>Suicide:</strong> Suicide Risk Assessment</p>
                            </div>
                        </div>
                    `;
                    break;
                case 'vitals':
                    details = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6><i class="fas fa-user text-primary me-2"></i>Patient Information</h6>
                                <p><strong>Patient ID:</strong> Patient Identifier</p>
                                <p><strong>Recorded At:</strong> Recording Date</p>
                                <p><strong>Notes:</strong> Additional Notes</p>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-heartbeat text-danger me-2"></i>Vital Signs</h6>
                                <p><strong>Blood Pressure:</strong> Encrypted Blood Pressure</p>
                                <p><strong>Heart Rate:</strong> Encrypted Heart Rate</p>
                                <p><strong>Temperature:</strong> Encrypted Temperature</p>
                                <p><strong>Respiratory Rate:</strong> Encrypted Respiratory Rate</p>
                                <p><strong>SpO2:</strong> Encrypted SpO2</p>
                                <p><strong>Height:</strong> Encrypted Height</p>
                                <p><strong>Weight:</strong> Encrypted Weight</p>
                            </div>
                        </div>
                    `;
                    break;
                default:
                    details = '<p>No details available for this record type.</p>';
            }
            
            return details;
        }

        // Placeholder function to prevent initializeCharts error
        function initializeCharts() {
            console.log('Charts initialization not needed for this page');
        }

        // Legacy decryption function for backward compatibility
        async function decryptValueHybrid(encryptedValue, privateKey) {
            try {
                // Simple legacy decryption - just return the value as is for now
                // In a real implementation, this would use the legacy AES decryption
                return encryptedValue;
            } catch (error) {
                console.error('Legacy decryption error:', error);
                return encryptedValue;
            }
        }

    </script>
}

    <!-- Hybrid Encryption Library -->
    <script src="~/js/hybrid-encryption.js"></script>