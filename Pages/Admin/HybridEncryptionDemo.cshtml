<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hybrid Encryption Demo - BHCARE</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .demo-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .key-display {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            word-break: break-all;
        }
        .encrypted-data {
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            word-break: break-all;
        }
        .decrypted-data {
            background-color: #d1edff;
            border: 1px solid #74c0fc;
            border-radius: 8px;
            padding: 15px;
            margin: 10px 0;
            font-family: 'Courier New', monospace;
            font-size: 12px;
        }
        .status-success {
            color: #28a745;
        }
        .status-error {
            color: #dc3545;
        }
        .status-warning {
            color: #ffc107;
        }
    </style>
</head>
<body>
    <div class="demo-container">
        <div class="row">
            <div class="col-12">
                <h1 class="text-center mb-4">
                    <i class="fas fa-shield-alt text-primary me-2"></i>
                    Hybrid Encryption Demo - BHCARE
                </h1>
                <p class="text-center text-muted mb-4">
                    Demonstrating AES-256-GCM + RSA-2048 hybrid encryption for secure data protection
                </p>
            </div>
        </div>

        <div class="row">
            <!-- Key Generation Section -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-key me-2"></i>RSA Key Pair Generation
                        </h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">
                            Generate a new RSA-2048 key pair for hybrid encryption. 
                            The public key will be used to encrypt AES keys, while the private key will decrypt them.
                        </p>
                        <button class="btn btn-primary" onclick="generateKeyPair()">
                            <i class="fas fa-plus-circle me-1"></i>Generate Key Pair
                        </button>
                        
                        <div id="keyPairResult" style="display: none;">
                            <h6 class="mt-3">Generated Key Pair:</h6>
                            <div class="key-display">
                                <strong>Public Key:</strong><br>
                                <span id="publicKeyDisplay"></span>
                            </div>
                            <div class="key-display">
                                <strong>Private Key:</strong><br>
                                <span id="privateKeyDisplay"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Encryption Section -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-lock me-2"></i>Data Encryption
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="dataToEncrypt" class="form-label">Data to Encrypt:</label>
                            <textarea class="form-control" id="dataToEncrypt" rows="3" 
                                placeholder="Enter sensitive data to encrypt (e.g., patient information, medical records)">Jonh Arao - Age: 1, Gender: Male, Address: Barangay 160, Contact: 09913933498, Drugs/Alcohol: No substance use reported</textarea>
                        </div>
                        <div class="mb-3">
                            <label for="publicKeyInput" class="form-label">RSA Public Key:</label>
                            <textarea class="form-control" id="publicKeyInput" rows="2" 
                                placeholder="Paste the RSA public key here"></textarea>
                        </div>
                        <button class="btn btn-success" onclick="encryptData()">
                            <i class="fas fa-lock me-1"></i>Encrypt Data
                        </button>
                        
                        <div id="encryptionResult" style="display: none;">
                            <h6 class="mt-3">Encrypted Data:</h6>
                            <div class="encrypted-data">
                                <strong>Encrypted Data:</strong><br>
                                <span id="encryptedDataDisplay"></span>
                            </div>
                            <div class="encrypted-data">
                                <strong>Encrypted AES Key:</strong><br>
                                <span id="encryptedKeyDisplay"></span>
                            </div>
                            <div class="encrypted-data">
                                <strong>IV (Initialization Vector):</strong><br>
                                <span id="ivDisplay"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <!-- Decryption Section -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">
                            <i class="fas fa-unlock me-2"></i>Data Decryption
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="privateKeyInput" class="form-label">RSA Private Key:</label>
                            <textarea class="form-control" id="privateKeyInput" rows="2" 
                                placeholder="Paste the RSA private key here"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="encryptedDataInput" class="form-label">Encrypted Data (JSON):</label>
                            <textarea class="form-control" id="encryptedDataInput" rows="4" 
                                placeholder="Paste the encrypted data object here"></textarea>
                        </div>
                        <button class="btn btn-warning" onclick="decryptData()">
                            <i class="fas fa-unlock me-1"></i>Decrypt Data
                        </button>
                        
                        <div id="decryptionResult" style="display: none;">
                            <h6 class="mt-3">Decrypted Data:</h6>
                            <div class="decrypted-data">
                                <span id="decryptedDataDisplay"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Status and Logs Section -->
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-info-circle me-2"></i>Status & Logs
                        </h5>
                    </div>
                    <div class="card-body">
                        <div id="statusLog" class="mb-3">
                            <p class="text-muted">Ready to demonstrate hybrid encryption...</p>
                        </div>
                        <button class="btn btn-outline-info btn-sm" onclick="clearLogs()">
                            <i class="fas fa-trash me-1"></i>Clear Logs
                        </button>
                        <button class="btn btn-outline-primary btn-sm" onclick="runFullDemo()">
                            <i class="fas fa-play me-1"></i>Run Full Demo
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Error Handling Examples -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-exclamation-triangle me-2"></i>Error Handling Examples
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <h6>Invalid Key Test</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="testInvalidKey()">
                                    Test Invalid Private Key
                                </button>
                            </div>
                            <div class="col-md-4">
                                <h6>Corrupted Data Test</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="testCorruptedData()">
                                    Test Corrupted Encrypted Data
                                </button>
                            </div>
                            <div class="col-md-4">
                                <h6>Wrong Key Test</h6>
                                <button class="btn btn-outline-danger btn-sm" onclick="testWrongKey()">
                                    Test Wrong Private Key
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Include the hybrid encryption library -->
    <script src="~/js/hybrid-encryption.js"></script>
    
    <script>
        let currentKeyPair = null;
        let currentEncryptedData = null;

        // Log status messages
        function logStatus(message, type = 'info') {
            const logDiv = document.getElementById('statusLog');
            const timestamp = new Date().toLocaleTimeString();
            const icon = type === 'success' ? 'check-circle' : 
                        type === 'error' ? 'exclamation-triangle' : 
                        type === 'warning' ? 'exclamation-circle' : 'info-circle';
            const color = type === 'success' ? 'success' : 
                         type === 'error' ? 'danger' : 
                         type === 'warning' ? 'warning' : 'info';
            
            logDiv.innerHTML += `<p class="status-${color}"><i class="fas fa-${icon} me-1"></i>[${timestamp}] ${message}</p>`;
            logDiv.scrollTop = logDiv.scrollHeight;
        }

        // Clear logs
        function clearLogs() {
            document.getElementById('statusLog').innerHTML = '<p class="text-muted">Logs cleared...</p>';
        }

        // Generate RSA key pair
        async function generateKeyPair() {
            try {
                logStatus('Generating RSA-2048 key pair...', 'info');
                
                const keyPair = await window.hybridEncryption.generateRSAKeyPair();
                const publicKey = await window.hybridEncryption.exportRSAKey(keyPair.publicKey, 'public');
                const privateKey = await window.hybridEncryption.exportRSAKey(keyPair.privateKey, 'private');
                
                currentKeyPair = { publicKey, privateKey };
                
                // Display keys
                document.getElementById('publicKeyDisplay').textContent = publicKey;
                document.getElementById('privateKeyDisplay').textContent = privateKey;
                document.getElementById('keyPairResult').style.display = 'block';
                
                // Auto-fill input fields
                document.getElementById('publicKeyInput').value = publicKey;
                document.getElementById('privateKeyInput').value = privateKey;
                
                logStatus('RSA key pair generated successfully!', 'success');
            } catch (error) {
                logStatus(`Key generation failed: ${error.message}`, 'error');
            }
        }

        // Encrypt data
        async function encryptData() {
            try {
                const data = document.getElementById('dataToEncrypt').value.trim();
                const publicKey = document.getElementById('publicKeyInput').value.trim();
                
                if (!data) {
                    logStatus('Please enter data to encrypt', 'warning');
                    return;
                }
                
                if (!publicKey) {
                    logStatus('Please enter a public key', 'warning');
                    return;
                }
                
                logStatus('Encrypting data using hybrid encryption (AES-256-GCM + RSA-2048)...', 'info');
                
                const encryptedData = await window.hybridEncryption.encrypt(data, publicKey);
                currentEncryptedData = encryptedData;
                
                // Display encrypted data
                document.getElementById('encryptedDataDisplay').textContent = encryptedData.encryptedData;
                document.getElementById('encryptedKeyDisplay').textContent = encryptedData.encryptedKey;
                document.getElementById('ivDisplay').textContent = encryptedData.iv;
                document.getElementById('encryptionResult').style.display = 'block';
                
                // Auto-fill decryption input
                document.getElementById('encryptedDataInput').value = JSON.stringify(encryptedData, null, 2);
                
                logStatus('Data encrypted successfully!', 'success');
            } catch (error) {
                logStatus(`Encryption failed: ${error.message}`, 'error');
            }
        }

        // Decrypt data
        async function decryptData() {
            try {
                const privateKey = document.getElementById('privateKeyInput').value.trim();
                const encryptedDataStr = document.getElementById('encryptedDataInput').value.trim();
                
                if (!privateKey) {
                    logStatus('Please enter a private key', 'warning');
                    return;
                }
                
                if (!encryptedDataStr) {
                    logStatus('Please enter encrypted data', 'warning');
                    return;
                }
                
                logStatus('Decrypting data using hybrid decryption...', 'info');
                
                const encryptedData = JSON.parse(encryptedDataStr);
                const decryptedData = await window.hybridEncryption.decrypt(encryptedData, privateKey);
                
                // Display decrypted data
                document.getElementById('decryptedDataDisplay').textContent = decryptedData;
                document.getElementById('decryptionResult').style.display = 'block';
                
                logStatus('Data decrypted successfully!', 'success');
            } catch (error) {
                logStatus(`Decryption failed: ${error.message}`, 'error');
            }
        }

        // Run full demo
        async function runFullDemo() {
            clearLogs();
            logStatus('Starting full hybrid encryption demo...', 'info');
            
            try {
                // Step 1: Generate key pair
                await generateKeyPair();
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Step 2: Encrypt data
                await encryptData();
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Step 3: Decrypt data
                await decryptData();
                
                logStatus('Full demo completed successfully!', 'success');
            } catch (error) {
                logStatus(`Demo failed: ${error.message}`, 'error');
            }
        }

        // Test invalid key
        async function testInvalidKey() {
            try {
                logStatus('Testing invalid private key...', 'warning');
                
                const invalidKey = 'invalid-key-data';
                const encryptedData = currentEncryptedData || {
                    encryptedData: 'test',
                    encryptedKey: 'test',
                    iv: 'test'
                };
                
                await window.hybridEncryption.decrypt(encryptedData, invalidKey);
                logStatus('Unexpected: Invalid key should have failed', 'error');
            } catch (error) {
                logStatus(`Expected error with invalid key: ${error.message}`, 'success');
            }
        }

        // Test corrupted data
        async function testCorruptedData() {
            try {
                logStatus('Testing corrupted encrypted data...', 'warning');
                
                const privateKey = currentKeyPair?.privateKey || 'test-key';
                const corruptedData = {
                    encryptedData: 'corrupted-data',
                    encryptedKey: 'corrupted-key',
                    iv: 'corrupted-iv'
                };
                
                await window.hybridEncryption.decrypt(corruptedData, privateKey);
                logStatus('Unexpected: Corrupted data should have failed', 'error');
            } catch (error) {
                logStatus(`Expected error with corrupted data: ${error.message}`, 'success');
            }
        }

        // Test wrong key
        async function testWrongKey() {
            try {
                logStatus('Testing wrong private key...', 'warning');
                
                // Generate a different key pair
                const wrongKeyPair = await window.hybridEncryption.generateRSAKeyPair();
                const wrongPrivateKey = await window.hybridEncryption.exportRSAKey(wrongKeyPair.privateKey, 'private');
                
                const encryptedData = currentEncryptedData || {
                    encryptedData: 'test',
                    encryptedKey: 'test',
                    iv: 'test'
                };
                
                await window.hybridEncryption.decrypt(encryptedData, wrongPrivateKey);
                logStatus('Unexpected: Wrong key should have failed', 'error');
            } catch (error) {
                logStatus(`Expected error with wrong key: ${error.message}`, 'success');
            }
        }

        // Initialize demo
        document.addEventListener('DOMContentLoaded', function() {
            logStatus('Hybrid encryption demo loaded successfully!', 'success');
            logStatus('Click "Generate Key Pair" to start, or "Run Full Demo" for automated demonstration', 'info');
        });
    </script>
</body>
</html>


