@page
@model Barangay.Pages.Nurse.NurseDashboardModel
@{
    ViewData["Title"] = "Nurse Dashboard";
    Layout = "_NurseLayout";
}

<div class="nurse-dashboard h-100">
    <div class="container-fluid h-100 py-2">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <div>
                <h1 class="h4 mb-0 text-gray-800">Nurse Dashboard</h1>
                <p class="text-muted small mb-0">Welcome back! Here's your overview for @DateTime.Now.ToString("MMMM dd, yyyy")</p>
            </div>
            <div>
                <button class="btn btn-sm btn-primary" id="refreshData">
                    <i class="fas fa-sync-alt me-1"></i>Refresh
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="alert alert-danger py-2 px-3 mb-2" role="alert">
                <i class="fas fa-exclamation-circle me-1"></i>
                @Model.ErrorMessage
                <button type="button" class="btn-close small" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Stats Cards -->
        <div class="row g-2 mb-2">
            <div class="col-xl-3 col-md-6">
                <div class="card border-left-primary shadow-sm h-100 py-2">
                    <div class="card-body py-1 px-2">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                    Today's Total Patients</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="totalPatientsCount">@Model.TodaysTotalPatients</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-users fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6">
                <div class="card border-left-success shadow-sm h-100 py-2">
                    <div class="card-body py-1 px-2">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                    In Progress</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="inProgressCount">@Model.InProgressCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-clock fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6">
                <div class="card border-left-warning shadow-sm h-100 py-2">
                    <div class="card-body py-1 px-2">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                    Waiting</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="waitingCount">@Model.WaitingCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-hourglass-half fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-xl-3 col-md-6">
                <div class="card border-left-info shadow-sm h-100 py-2">
                    <div class="card-body py-1 px-2">
                        <div class="row no-gutters align-items-center">
                            <div class="col mr-2">
                                <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                    Completed Today</div>
                                <div class="h5 mb-0 font-weight-bold text-gray-800" id="completedCount">@Model.CompletedTodayCount</div>
                            </div>
                            <div class="col-auto">
                                <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Content Row -->
        <div class="row g-2 flex-grow-1">
            <!-- Treatment Plan Card -->
            <div class="col-lg-8">
                <div class="card shadow-sm h-100">
                    <div class="card-header py-2 px-3 d-flex justify-content-between align-items-center">
                        <h6 class="m-0 font-weight-bold text-primary">Treatment Plan</h6>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-primary" id="nextPatient">
                                <i class="fas fa-user-plus me-1"></i> Next
                            </button>
                            <button class="btn btn-sm btn-outline-primary" id="addNote">
                                <i class="fas fa-sticky-note"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-secondary" id="assignTask">
                                <i class="fas fa-tasks"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (Model.Queue.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover table-sm mb-0">
                                    <thead>
                                        <tr>
                                            <th class="px-2">#</th>
                                            <th>Patient Name</th>
                                            <th>Status</th>
                                            <th>Waiting</th>
                                            <th class="px-2">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var patient in Model.Queue)
                                        {
                                            <tr>
                                                <td class="px-2">@patient.Id</td>
                                                <td>@patient.Name</td>
                                                <td>
                                                    <span class="badge bg-@(patient.Status == "Waiting" ? "warning" : 
                                                                          patient.Status == "In Progress" ? "success" : "info")">
                                                        @patient.Status
                                                    </span>
                                                </td>
                                                <td>@patient.WaitingTime</td>
                                                <td class="px-2">
                                                    <button class="btn btn-sm btn-primary view-patient" data-id="@patient.Id">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-success start-treatment" data-id="@patient.Id">
                                                        <i class="fas fa-play"></i>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-3">
                                <i class="fas fa-clipboard-list fa-2x text-gray-300 mb-2"></i>
                                <p class="text-muted small mb-0">No patients in queue</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Shared Task Board -->
            <div class="col-lg-4">
                <div class="card shadow-sm h-100">
                    <div class="card-header py-2 px-3">
                        <h6 class="m-0 font-weight-bold text-primary">Shared Task Board</h6>
                    </div>
                    <div class="card-body p-2">
                        <div id="messageArea" class="messages-container mb-2" style="max-height: calc(100vh - 400px); overflow-y: auto;">
                            @foreach (var alert in Model.Alerts.OrderByDescending(a => a.Timestamp))
                            {
                                <div class="message @(alert.Type.ToLower()) p-2 mb-2">
                                    <div class="message-header">
                                        <strong class="small">@alert.Title</strong>
                                        <small class="text-muted">@alert.Timestamp.ToString("HH:mm")</small>
                                    </div>
                                    <div class="message-content small">
                                        @alert.Message
                                    </div>
                                </div>
                            }
                        </div>
                        <form id="taskForm" class="mt-2">
                            <div class="input-group input-group-sm">
                                <input type="text" class="form-control" placeholder="Type a message..." id="messageInput">
                                <select class="form-select" style="max-width: 100px;" id="recipientSelect">
                                    <option value="all">All</option>
                                    <option value="doctors">Doctors</option>
                                    <option value="nurses">Nurses</option>
                                </select>
                                <button class="btn btn-primary" type="submit">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Nurse Dashboard initialized');
            
            // Refresh data periodically
            let autoRefresh = true;
            const refreshInterval = 30000; // 30 seconds
            
            function updateDashboard() {
                console.log('Updating dashboard data...');
                fetch('/api/nurse/dashboard/stats')
                    .then(response => response.json())
                    .then(data => {
                        console.log('Dashboard data updated:', data);
                        document.getElementById('totalPatientsCount').textContent = data.totalPatients;
                        document.getElementById('inProgressCount').textContent = data.inProgress;
                        document.getElementById('waitingCount').textContent = data.waiting;
                        document.getElementById('completedCount').textContent = data.completed;
                    })
                    .catch(error => console.error('Error updating dashboard:', error));
            }
            
            // Set up auto-refresh
            let refreshTimer = setInterval(() => {
                if (autoRefresh) {
                    updateDashboard();
                }
            }, refreshInterval);
            
            // Manual refresh button
            document.getElementById('refreshData')?.addEventListener('click', function() {
                console.log('Manual refresh triggered');
                updateDashboard();
            });
            
            // Task form submission
            document.getElementById('taskForm')?.addEventListener('submit', function(e) {
                e.preventDefault();
                const message = document.getElementById('messageInput').value;
                const recipient = document.getElementById('recipientSelect').value;
                
                if (!message.trim()) return;
                
                console.log('Sending task message:', { message, recipient });
                
                // Add message to the board immediately for better UX
                const messageArea = document.getElementById('messageArea');
                const newMessage = document.createElement('div');
                newMessage.className = 'message sent';
                newMessage.innerHTML = `
                    <div class="message-header">
                        <strong>You</strong>
                        <small class="text-muted">${new Date().toLocaleTimeString()}</small>
                    </div>
                    <div class="message-content">
                        ${message}
                    </div>
                `;
                messageArea.insertBefore(newMessage, messageArea.firstChild);
                
                // Clear input
                document.getElementById('messageInput').value = '';
                
                // Scroll to latest message
                messageArea.scrollTop = 0;
            });
            
            // Patient action buttons
            document.querySelectorAll('.view-patient').forEach(button => {
                button.addEventListener('click', function() {
                    const patientId = this.dataset.id;
                    console.log('Viewing patient:', patientId);
                    window.location.href = `/Nurse/PatientDetails?id=${patientId}`;
                });
            });
            
            document.querySelectorAll('.start-treatment').forEach(button => {
                button.addEventListener('click', function() {
                    const patientId = this.dataset.id;
                    console.log('Starting treatment for patient:', patientId);
                    // Add your treatment start logic here
                });
            });
            
            // Cleanup on page unload
            window.addEventListener('beforeunload', function() {
                clearInterval(refreshTimer);
            });
        });
    </script>
}